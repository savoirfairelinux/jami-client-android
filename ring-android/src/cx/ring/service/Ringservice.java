/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package cx.ring.service;

public class Ringservice {
  public static void sflph_fini() {
    RingserviceJNI.sflph_fini();
  }

  public static void sflph_poll_events() {
    RingserviceJNI.sflph_poll_events();
  }

  public static boolean sflph_call_place(String account_id, String call_id, String to) {
    return RingserviceJNI.sflph_call_place(account_id, call_id, to);
  }

  public static boolean sflph_call_refuse(String call_id) {
    return RingserviceJNI.sflph_call_refuse(call_id);
  }

  public static boolean sflph_call_accept(String call_id) {
    return RingserviceJNI.sflph_call_accept(call_id);
  }

  public static boolean sflph_call_hang_up(String call_id) {
    return RingserviceJNI.sflph_call_hang_up(call_id);
  }

  public static boolean sflph_call_hold(String call_id) {
    return RingserviceJNI.sflph_call_hold(call_id);
  }

  public static boolean sflph_call_unhold(String call_id) {
    return RingserviceJNI.sflph_call_unhold(call_id);
  }

  public static boolean sflph_call_transfer(String call_id, String to) {
    return RingserviceJNI.sflph_call_transfer(call_id, to);
  }

  public static boolean sflph_call_attended_transfer(String transfer_id, String target_id) {
    return RingserviceJNI.sflph_call_attended_transfer(transfer_id, target_id);
  }

  public static StringMap sflph_call_get_call_details(String call_id) {
    return new StringMap(RingserviceJNI.sflph_call_get_call_details(call_id), true);
  }

  public static StringVect sflph_call_get_call_list() {
    return new StringVect(RingserviceJNI.sflph_call_get_call_list(), true);
  }

  public static void sflph_call_remove_conference(String conf_id) {
    RingserviceJNI.sflph_call_remove_conference(conf_id);
  }

  public static boolean sflph_call_join_participant(String sel_call_id, String drag_call_id) {
    return RingserviceJNI.sflph_call_join_participant(sel_call_id, drag_call_id);
  }

  public static void sflph_call_create_conf_from_participant_list(StringVect participants) {
    RingserviceJNI.sflph_call_create_conf_from_participant_list(StringVect.getCPtr(participants), participants);
  }

  public static boolean sflph_call_is_conference_participant(String call_id) {
    return RingserviceJNI.sflph_call_is_conference_participant(call_id);
  }

  public static boolean sflph_call_add_participant(String call_id, String conf_id) {
    return RingserviceJNI.sflph_call_add_participant(call_id, conf_id);
  }

  public static boolean sflph_call_add_main_participant(String conf_id) {
    return RingserviceJNI.sflph_call_add_main_participant(conf_id);
  }

  public static boolean sflph_call_detach_participant(String call_id) {
    return RingserviceJNI.sflph_call_detach_participant(call_id);
  }

  public static boolean sflph_call_join_conference(String sel_conf_id, String drag_conf_id) {
    return RingserviceJNI.sflph_call_join_conference(sel_conf_id, drag_conf_id);
  }

  public static boolean sflph_call_hang_up_conference(String conf_id) {
    return RingserviceJNI.sflph_call_hang_up_conference(conf_id);
  }

  public static boolean sflph_call_hold_conference(String conf_id) {
    return RingserviceJNI.sflph_call_hold_conference(conf_id);
  }

  public static boolean sflph_call_unhold_conference(String conf_id) {
    return RingserviceJNI.sflph_call_unhold_conference(conf_id);
  }

  public static StringVect sflph_call_get_conference_list() {
    return new StringVect(RingserviceJNI.sflph_call_get_conference_list(), true);
  }

  public static StringVect sflph_call_get_participant_list(String conf_id) {
    return new StringVect(RingserviceJNI.sflph_call_get_participant_list(conf_id), true);
  }

  public static StringVect sflph_call_get_display_names(String conf_id) {
    return new StringVect(RingserviceJNI.sflph_call_get_display_names(conf_id), true);
  }

  public static String sflph_call_get_conference_id(String call_id) {
    return RingserviceJNI.sflph_call_get_conference_id(call_id);
  }

  public static StringMap sflph_call_get_conference_details(String call_id) {
    return new StringMap(RingserviceJNI.sflph_call_get_conference_details(call_id), true);
  }

  public static boolean sflph_call_play_recorded_file(String path) {
    return RingserviceJNI.sflph_call_play_recorded_file(path);
  }

  public static void sflph_call_stop_recorded_file(String path) {
    RingserviceJNI.sflph_call_stop_recorded_file(path);
  }

  public static boolean sflph_call_toggle_recording(String call_id) {
    return RingserviceJNI.sflph_call_toggle_recording(call_id);
  }

  public static void sflph_call_set_recording(String call_id) {
    RingserviceJNI.sflph_call_set_recording(call_id);
  }

  public static void sflph_call_record_playback_seek(double pos) {
    RingserviceJNI.sflph_call_record_playback_seek(pos);
  }

  public static boolean sflph_call_is_recording(String call_id) {
    return RingserviceJNI.sflph_call_is_recording(call_id);
  }

  public static String sflph_call_get_current_audio_codec_name(String call_id) {
    return RingserviceJNI.sflph_call_get_current_audio_codec_name(call_id);
  }

  public static void sflph_call_play_dtmf(String key) {
    RingserviceJNI.sflph_call_play_dtmf(key);
  }

  public static void sflph_call_start_tone(int start, int type) {
    RingserviceJNI.sflph_call_start_tone(start, type);
  }

  public static void sflph_call_set_sas_verified(String call_id) {
    RingserviceJNI.sflph_call_set_sas_verified(call_id);
  }

  public static void sflph_call_reset_sas_verified(String call_id) {
    RingserviceJNI.sflph_call_reset_sas_verified(call_id);
  }

  public static void sflph_call_set_confirm_go_clear(String call_id) {
    RingserviceJNI.sflph_call_set_confirm_go_clear(call_id);
  }

  public static void sflph_call_request_go_clear(String call_id) {
    RingserviceJNI.sflph_call_request_go_clear(call_id);
  }

  public static void sflph_call_accept_enrollment(String call_id, boolean accepted) {
    RingserviceJNI.sflph_call_accept_enrollment(call_id, accepted);
  }

  public static void sflph_call_send_text_message(String call_id, String message) {
    RingserviceJNI.sflph_call_send_text_message(call_id, message);
  }

  public static StringMap sflph_config_get_account_details(String account_id) {
    return new StringMap(RingserviceJNI.sflph_config_get_account_details(account_id), true);
  }

  public static void sflph_config_set_account_details(String account_id, StringMap details) {
    RingserviceJNI.sflph_config_set_account_details(account_id, StringMap.getCPtr(details), details);
  }

  public static StringMap sflph_config_get_account_template() {
    return new StringMap(RingserviceJNI.sflph_config_get_account_template(), true);
  }

  public static String sflph_config_add_account(StringMap details) {
    return RingserviceJNI.sflph_config_add_account(StringMap.getCPtr(details), details);
  }

  public static void sflph_config_remove_account(String account_id) {
    RingserviceJNI.sflph_config_remove_account(account_id);
  }

  public static StringVect sflph_config_get_account_list() {
    return new StringVect(RingserviceJNI.sflph_config_get_account_list(), true);
  }

  public static void sflph_config_send_register(String account_id, boolean enable) {
    RingserviceJNI.sflph_config_send_register(account_id, enable);
  }

  public static void sflph_config_register_all_accounts() {
    RingserviceJNI.sflph_config_register_all_accounts();
  }

  public static StringMap sflph_config_get_tls_default_settings() {
    return new StringMap(RingserviceJNI.sflph_config_get_tls_default_settings(), true);
  }

  public static IntVect sflph_config_get_audio_codec_list() {
    return new IntVect(RingserviceJNI.sflph_config_get_audio_codec_list(), true);
  }

  public static StringVect sflph_config_get_supported_tls_method() {
    return new StringVect(RingserviceJNI.sflph_config_get_supported_tls_method(), true);
  }

  public static StringVect sflph_config_get_audio_codec_details(int payload) {
    return new StringVect(RingserviceJNI.sflph_config_get_audio_codec_details(payload), true);
  }

  public static IntVect sflph_config_get_active_audio_codec_list(String account_id) {
    return new IntVect(RingserviceJNI.sflph_config_get_active_audio_codec_list(account_id), true);
  }

  public static void sflph_config_set_active_audio_codec_list(StringVect list, String account_id) {
    RingserviceJNI.sflph_config_set_active_audio_codec_list(StringVect.getCPtr(list), list, account_id);
  }

  public static StringVect sflph_config_get_audio_plugin_list() {
    return new StringVect(RingserviceJNI.sflph_config_get_audio_plugin_list(), true);
  }

  public static void sflph_config_set_audio_plugin(String audio_plugin) {
    RingserviceJNI.sflph_config_set_audio_plugin(audio_plugin);
  }

  public static StringVect sflph_config_get_audio_output_device_list() {
    return new StringVect(RingserviceJNI.sflph_config_get_audio_output_device_list(), true);
  }

  public static void sflph_config_set_audio_output_device(int index) {
    RingserviceJNI.sflph_config_set_audio_output_device(index);
  }

  public static void sflph_config_set_audio_input_device(int index) {
    RingserviceJNI.sflph_config_set_audio_input_device(index);
  }

  public static void sflph_config_set_audio_ringtone_device(int index) {
    RingserviceJNI.sflph_config_set_audio_ringtone_device(index);
  }

  public static StringVect sflph_config_get_audio_input_device_list() {
    return new StringVect(RingserviceJNI.sflph_config_get_audio_input_device_list(), true);
  }

  public static StringVect sflph_config_get_current_audio_devices_index() {
    return new StringVect(RingserviceJNI.sflph_config_get_current_audio_devices_index(), true);
  }

  public static int sflph_config_get_audio_input_device_index(String name) {
    return RingserviceJNI.sflph_config_get_audio_input_device_index(name);
  }

  public static int sflph_config_get_audio_output_device_index(String name) {
    return RingserviceJNI.sflph_config_get_audio_output_device_index(name);
  }

  public static String sflph_config_get_current_audio_output_plugin() {
    return RingserviceJNI.sflph_config_get_current_audio_output_plugin();
  }

  public static boolean sflph_config_get_noise_suppress_state() {
    return RingserviceJNI.sflph_config_get_noise_suppress_state();
  }

  public static void sflph_config_set_noise_suppress_state(boolean state) {
    RingserviceJNI.sflph_config_set_noise_suppress_state(state);
  }

  public static boolean sflph_config_is_agc_enabled() {
    return RingserviceJNI.sflph_config_is_agc_enabled();
  }

  public static void sflph_config_enable_agc(boolean enabled) {
    RingserviceJNI.sflph_config_enable_agc(enabled);
  }

  public static void sflph_config_mute_dtmf(boolean mute) {
    RingserviceJNI.sflph_config_mute_dtmf(mute);
  }

  public static boolean sflph_config_is_dtmf_muted() {
    return RingserviceJNI.sflph_config_is_dtmf_muted();
  }

  public static boolean sflph_config_is_capture_muted() {
    return RingserviceJNI.sflph_config_is_capture_muted();
  }

  public static void sflph_config_mute_capture(boolean mute) {
    RingserviceJNI.sflph_config_mute_capture(mute);
  }

  public static boolean sflph_config_is_playback_muted() {
    return RingserviceJNI.sflph_config_is_playback_muted();
  }

  public static void sflph_config_mute_playback(int mute) {
    RingserviceJNI.sflph_config_mute_playback(mute);
  }

  public static StringMap sflph_config_get_ringtone_list() {
    return new StringMap(RingserviceJNI.sflph_config_get_ringtone_list(), true);
  }

  public static String sflph_config_get_audio_manager() {
    return RingserviceJNI.sflph_config_get_audio_manager();
  }

  public static boolean sflph_config_set_audio_manager(String api) {
    return RingserviceJNI.sflph_config_set_audio_manager(api);
  }

  public static StringVect sflph_config_get_supported_audio_managers() {
    return new StringVect(RingserviceJNI.sflph_config_get_supported_audio_managers(), true);
  }

  public static int sflph_config_is_iax2_enabled() {
    return RingserviceJNI.sflph_config_is_iax2_enabled();
  }

  public static String sflph_config_get_record_path() {
    return RingserviceJNI.sflph_config_get_record_path();
  }

  public static void sflph_config_set_record_path(String path) {
    RingserviceJNI.sflph_config_set_record_path(path);
  }

  public static boolean sflph_config_is_always_recording() {
    return RingserviceJNI.sflph_config_is_always_recording();
  }

  public static void sflph_config_set_always_recording(boolean rec) {
    RingserviceJNI.sflph_config_set_always_recording(rec);
  }

  public static void sflph_config_set_history_limit(int days) {
    RingserviceJNI.sflph_config_set_history_limit(days);
  }

  public static int sflph_config_get_history_limit() {
    return RingserviceJNI.sflph_config_get_history_limit();
  }

  public static void sflph_config_clear_history() {
    RingserviceJNI.sflph_config_clear_history();
  }

  public static void sflph_config_set_accounts_order(String order) {
    RingserviceJNI.sflph_config_set_accounts_order(order);
  }

  public static StringMap sflph_config_get_hook_settings() {
    return new StringMap(RingserviceJNI.sflph_config_get_hook_settings(), true);
  }

  public static void sflph_config_set_hook_settings(StringMap settings) {
    RingserviceJNI.sflph_config_set_hook_settings(StringMap.getCPtr(settings), settings);
  }

  public static VectMap sflph_config_get_history() {
    return new VectMap(RingserviceJNI.sflph_config_get_history(), true);
  }

  public static StringMap sflph_config_get_tls_settings() {
    return new StringMap(RingserviceJNI.sflph_config_get_tls_settings(), true);
  }

  public static void sflph_config_set_tls_settings(StringMap settings) {
    RingserviceJNI.sflph_config_set_tls_settings(StringMap.getCPtr(settings), settings);
  }

  public static StringMap sflph_config_get_ip2ip_details() {
    return new StringMap(RingserviceJNI.sflph_config_get_ip2ip_details(), true);
  }

  public static VectMap sflph_config_get_credentials(String account_id) {
    return new VectMap(RingserviceJNI.sflph_config_get_credentials(account_id), true);
  }

  public static void sflph_config_set_credentials(String account_id, VectMap details) {
    RingserviceJNI.sflph_config_set_credentials(account_id, VectMap.getCPtr(details), details);
  }

  public static String sflph_config_get_addr_from_interface_name(String arg0) {
    return RingserviceJNI.sflph_config_get_addr_from_interface_name(arg0);
  }

  public static StringVect sflph_config_get_all_ip_interface() {
    return new StringVect(RingserviceJNI.sflph_config_get_all_ip_interface(), true);
  }

  public static StringVect sflph_config_get_all_ip_interface_by_name() {
    return new StringVect(RingserviceJNI.sflph_config_get_all_ip_interface_by_name(), true);
  }

  public static StringMap sflph_config_get_shortcuts() {
    return new StringMap(RingserviceJNI.sflph_config_get_shortcuts(), true);
  }

  public static void sflph_config_set_shortcuts(StringMap shortcuts) {
    RingserviceJNI.sflph_config_set_shortcuts(StringMap.getCPtr(shortcuts), shortcuts);
  }

  public static void sflph_config_set_volume(String device, double value) {
    RingserviceJNI.sflph_config_set_volume(device, value);
  }

  public static double sflph_config_get_volume(String device) {
    return RingserviceJNI.sflph_config_get_volume(device);
  }

  public static boolean sflph_config_check_for_private_key(String pem_path) {
    return RingserviceJNI.sflph_config_check_for_private_key(pem_path);
  }

  public static boolean sflph_config_check_certificate_validity(String ca_path, String pem_path) {
    return RingserviceJNI.sflph_config_check_certificate_validity(ca_path, pem_path);
  }

  public static boolean sflph_config_check_hostname_certificate(String host, String port) {
    return RingserviceJNI.sflph_config_check_hostname_certificate(host, port);
  }

  public static void init(ConfigurationCallback conf_cb, Callback call_cb) {
    RingserviceJNI.init(ConfigurationCallback.getCPtr(conf_cb), conf_cb, Callback.getCPtr(call_cb), call_cb);
  }

}
