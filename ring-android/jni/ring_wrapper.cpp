/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_RingserviceJNI = NULL;
    jmethodID director_methids[31];
  }
}

#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::map< std::string,std::string > >::const_reference std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::map< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::map< std::string,std::string > > *self,int i,std::vector< std::map< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__del(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int32_t_Sg__get(std::vector< int32_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int32_t_Sg__set(std::vector< int32_t > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }


#include <functional>



#include "dring/dring.h"



#include "dring/dring.h"

class Callback {
public:
    virtual ~Callback() {}
    virtual void callOnStateChange(const std::string& call_id, const std::string& state){}
    virtual void callOnTransferFail(void){}
    virtual void callOnTransferSuccess(void){}
    virtual void callOnRecordPlaybackStopped(const std::string& path){}
    virtual void callOnVoiceMailNotify(const std::string& call_id, int nd_msg){}
    virtual void callOnIncomingMessage(const std::string& id, const std::string& from, const std::string& msg){}
    virtual void callOnIncomingCall(const std::string& account_id, const std::string& call_id, const std::string& from){}
    virtual void callOnRecordPlaybackFilepath(const std::string& id, const std::string& filename){}
    virtual void callOnConferenceCreated(const std::string& conf_id){}
    virtual void callOnConferenceChanged(const std::string& conf_id, const std::string& state){}
    virtual void callOnUpdatePlaybackScale(const std::string& filepath, int position, int scale){}
    virtual void callOnConferenceRemove(const std::string& conf_id){}
    virtual void callOnNewCall(const std::string& account_id, const std::string& call_id, const std::string& to){}
    virtual void callOnSipCallStateChange(const std::string& call_id, const std::string& state, int code){}
    virtual void callOnRecordStateChange(const std::string& call_id, int state){}
    virtual void callOnSecureSdesOn(const std::string& call_id){}
    virtual void callOnSecureSdesOff(const std::string& call_id){}
    virtual void callOnSecureZrtpOn(const std::string& call_id, const std::string& cipher){}
    virtual void callOnSecureZrtpOff(const std::string& call_id){}
    virtual void callOnShowSas(const std::string& call_id, const std::string& sas, int verified){}
    virtual void callOnZrtpNotSuppOther(const std::string& call_id){}
    virtual void callOnZrtpNegotiationFail(const std::string& call_id, const std::string& reason, const std::string& severity){}
    virtual void callOnRtcpReceiveReport(const std::string& call_id, const std::map<std::string, int>& stats){}
};




#include "dring/dring.h"

class ConfigurationCallback {
public:
    virtual ~ConfigurationCallback(){}
    virtual void configOnVolumeChange(const std::string& device, int value){}
    virtual void configOnAccountsChange(void){}
    virtual void configOnHistoryChange(void){}
    virtual void configOnStunStatusFail(const std::string& account_id){}
    virtual void configOnRegistrationStateChange(const std::string& account_id, int state){}
    virtual void configOnSipRegistrationStateChange(const std::string& account_id, const std::string& state, int code){}
    virtual void configOnVolatileAccountsChange(const std::string& account_id, const std::map<std::string, std::string>& details){}
    virtual void configOnError(int alert){}
    virtual std::vector<int32_t> configGetHardwareAudioFormat(void){}
};


/* some functions that need to be declared in *_wrap.cpp
 * that are not declared elsewhere in the c++ code
 */
void init(ConfigurationCallback* conf_cb, Callback* call_cb) {

    using namespace std::placeholders;
    using std::bind;


    // Call event handlers
    sflph_call_ev_handlers callEvHandlers = {
        bind(&Callback::callOnStateChange, call_cb, _1, _2),
        bind(&Callback::callOnTransferFail, call_cb),
        bind(&Callback::callOnTransferSuccess, call_cb),
        bind(&Callback::callOnRecordPlaybackStopped, call_cb, _1),
        bind(&Callback::callOnVoiceMailNotify, call_cb, _1, _2),
        bind(&Callback::callOnIncomingMessage, call_cb, _1, _2, _3),
        bind(&Callback::callOnIncomingCall, call_cb, _1, _2, _3),
        bind(&Callback::callOnRecordPlaybackFilepath, call_cb, _1, _2),
        bind(&Callback::callOnConferenceCreated, call_cb, _1),
        bind(&Callback::callOnConferenceChanged, call_cb, _1, _2),
        bind(&Callback::callOnUpdatePlaybackScale, call_cb, _1, _2, _3),
        bind(&Callback::callOnConferenceRemove, call_cb, _1),
        bind(&Callback::callOnNewCall, call_cb, _1, _2, _3),
        bind(&Callback::callOnSipCallStateChange, call_cb, _1, _2, _3),
        bind(&Callback::callOnRecordStateChange, call_cb, _1, _2),
        bind(&Callback::callOnSecureSdesOn, call_cb, _1),
        bind(&Callback::callOnSecureSdesOff, call_cb, _1),
        bind(&Callback::callOnSecureZrtpOn, call_cb, _1, _2),
        bind(&Callback::callOnSecureZrtpOff, call_cb, _1),
        bind(&Callback::callOnShowSas, call_cb, _1, _2, _3),
        bind(&Callback::callOnZrtpNotSuppOther, call_cb, _1),
        bind(&Callback::callOnZrtpNegotiationFail, call_cb, _1, _2, _3),
        bind(&Callback::callOnRtcpReceiveReport, call_cb, _1, _2)
    };

    // Configuration event handlers
    sflph_config_ev_handlers configEvHandlers = {
        bind(&ConfigurationCallback::configOnVolumeChange, conf_cb, _1, _2),
        bind(&ConfigurationCallback::configOnAccountsChange, conf_cb),
        bind(&ConfigurationCallback::configOnHistoryChange, conf_cb),
        bind(&ConfigurationCallback::configOnStunStatusFail, conf_cb, _1),
        bind(&ConfigurationCallback::configOnRegistrationStateChange, conf_cb, _1, _2),
        bind(&ConfigurationCallback::configOnSipRegistrationStateChange, conf_cb, _1, _2, _3),
        bind(&ConfigurationCallback::configOnVolatileAccountsChange, conf_cb, _1, _2),
        bind(&ConfigurationCallback::configOnError, conf_cb, _1)
    };

    // All event handlers
    sflph_ev_handlers evHandlers = {};
    evHandlers.call_ev_handlers = callEvHandlers;
    evHandlers.config_ev_handlers = configEvHandlers;
    sflph_init(&evHandlers, 0);
}




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ring_wrapper.h"

SwigDirector_Callback::SwigDirector_Callback(JNIEnv *jenv) : Callback(), Swig::Director(jenv) {
}

SwigDirector_Callback::~SwigDirector_Callback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Callback::callOnStateChange(std::string const &call_id, std::string const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jstate = 0 ;
  
  if (!swig_override[0]) {
    Callback::callOnStateChange(call_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jstate = jenv->NewStringUTF((&state)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[0], swigjobj, jcall_id, jstate);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnTransferFail() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    Callback::callOnTransferFail();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnTransferSuccess() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    Callback::callOnTransferSuccess();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[2], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnRecordPlaybackStopped(std::string const &path) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath = 0 ;
  
  if (!swig_override[3]) {
    Callback::callOnRecordPlaybackStopped(path);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = jenv->NewStringUTF((&path)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[3], swigjobj, jpath);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnVoiceMailNotify(std::string const &call_id, int nd_msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jnd_msg  ;
  
  if (!swig_override[4]) {
    Callback::callOnVoiceMailNotify(call_id,nd_msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jnd_msg = (jint) nd_msg;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[4], swigjobj, jcall_id, jnd_msg);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnIncomingMessage(std::string const &id, std::string const &from, std::string const &msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jfrom = 0 ;
  jstring jmsg = 0 ;
  
  if (!swig_override[5]) {
    Callback::callOnIncomingMessage(id,from,msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str()); 
    jfrom = jenv->NewStringUTF((&from)->c_str()); 
    jmsg = jenv->NewStringUTF((&msg)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[5], swigjobj, jid, jfrom, jmsg);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnIncomingCall(std::string const &account_id, std::string const &call_id, std::string const &from) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jcall_id = 0 ;
  jstring jfrom = 0 ;
  
  if (!swig_override[6]) {
    Callback::callOnIncomingCall(account_id,call_id,from);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str()); 
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jfrom = jenv->NewStringUTF((&from)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[6], swigjobj, jaccount_id, jcall_id, jfrom);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnRecordPlaybackFilepath(std::string const &id, std::string const &filename) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jfilename = 0 ;
  
  if (!swig_override[7]) {
    Callback::callOnRecordPlaybackFilepath(id,filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str()); 
    jfilename = jenv->NewStringUTF((&filename)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[7], swigjobj, jid, jfilename);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnConferenceCreated(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[8]) {
    Callback::callOnConferenceCreated(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[8], swigjobj, jconf_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnConferenceChanged(std::string const &conf_id, std::string const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  jstring jstate = 0 ;
  
  if (!swig_override[9]) {
    Callback::callOnConferenceChanged(conf_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str()); 
    jstate = jenv->NewStringUTF((&state)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[9], swigjobj, jconf_id, jstate);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnUpdatePlaybackScale(std::string const &filepath, int position, int scale) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfilepath = 0 ;
  jint jposition  ;
  jint jscale  ;
  
  if (!swig_override[10]) {
    Callback::callOnUpdatePlaybackScale(filepath,position,scale);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfilepath = jenv->NewStringUTF((&filepath)->c_str()); 
    jposition = (jint) position;
    jscale = (jint) scale;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[10], swigjobj, jfilepath, jposition, jscale);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnConferenceRemove(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[11]) {
    Callback::callOnConferenceRemove(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[11], swigjobj, jconf_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnNewCall(std::string const &account_id, std::string const &call_id, std::string const &to) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jcall_id = 0 ;
  jstring jto = 0 ;
  
  if (!swig_override[12]) {
    Callback::callOnNewCall(account_id,call_id,to);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str()); 
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jto = jenv->NewStringUTF((&to)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[12], swigjobj, jaccount_id, jcall_id, jto);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnSipCallStateChange(std::string const &call_id, std::string const &state, int code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jstate = 0 ;
  jint jcode  ;
  
  if (!swig_override[13]) {
    Callback::callOnSipCallStateChange(call_id,state,code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jstate = jenv->NewStringUTF((&state)->c_str()); 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[13], swigjobj, jcall_id, jstate, jcode);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnRecordStateChange(std::string const &call_id, int state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jstate  ;
  
  if (!swig_override[14]) {
    Callback::callOnRecordStateChange(call_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jstate = (jint) state;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[14], swigjobj, jcall_id, jstate);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnSecureSdesOn(std::string const &call_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  
  if (!swig_override[15]) {
    Callback::callOnSecureSdesOn(call_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[15], swigjobj, jcall_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnSecureSdesOff(std::string const &call_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  
  if (!swig_override[16]) {
    Callback::callOnSecureSdesOff(call_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[16], swigjobj, jcall_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnSecureZrtpOn(std::string const &call_id, std::string const &cipher) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jcipher = 0 ;
  
  if (!swig_override[17]) {
    Callback::callOnSecureZrtpOn(call_id,cipher);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jcipher = jenv->NewStringUTF((&cipher)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[17], swigjobj, jcall_id, jcipher);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnSecureZrtpOff(std::string const &call_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  
  if (!swig_override[18]) {
    Callback::callOnSecureZrtpOff(call_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[18], swigjobj, jcall_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnShowSas(std::string const &call_id, std::string const &sas, int verified) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jsas = 0 ;
  jint jverified  ;
  
  if (!swig_override[19]) {
    Callback::callOnShowSas(call_id,sas,verified);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jsas = jenv->NewStringUTF((&sas)->c_str()); 
    jverified = (jint) verified;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[19], swigjobj, jcall_id, jsas, jverified);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnZrtpNotSuppOther(std::string const &call_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  
  if (!swig_override[20]) {
    Callback::callOnZrtpNotSuppOther(call_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[20], swigjobj, jcall_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnZrtpNegotiationFail(std::string const &call_id, std::string const &reason, std::string const &severity) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jreason = 0 ;
  jstring jseverity = 0 ;
  
  if (!swig_override[21]) {
    Callback::callOnZrtpNegotiationFail(call_id,reason,severity);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    jreason = jenv->NewStringUTF((&reason)->c_str()); 
    jseverity = jenv->NewStringUTF((&severity)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[21], swigjobj, jcall_id, jreason, jseverity);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::callOnRtcpReceiveReport(std::string const &call_id, std::map< std::string,int > const &stats) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jlong jstats = 0 ;
  
  if (!swig_override[22]) {
    Callback::callOnRtcpReceiveReport(call_id,stats);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str()); 
    *(std::map< std::string,int > **)&jstats = (std::map< std::string,int > *) &stats; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[22], swigjobj, jcall_id, jstats);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "callOnStateChange", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnTransferFail", "()V", NULL 
    },
    {
      "callOnTransferSuccess", "()V", NULL 
    },
    {
      "callOnRecordPlaybackStopped", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnVoiceMailNotify", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "callOnIncomingMessage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnIncomingCall", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnRecordPlaybackFilepath", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnConferenceCreated", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnConferenceChanged", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnUpdatePlaybackScale", "(Ljava/lang/String;II)V", NULL 
    },
    {
      "callOnConferenceRemove", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnNewCall", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnSipCallStateChange", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "callOnRecordStateChange", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "callOnSecureSdesOn", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnSecureSdesOff", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnSecureZrtpOn", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnSecureZrtpOff", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnShowSas", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "callOnZrtpNotSuppOther", "(Ljava/lang/String;)V", NULL 
    },
    {
      "callOnZrtpNegotiationFail", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "callOnRtcpReceiveReport", "(Ljava/lang/String;Lcx/ring/service/IntegerMap;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("cx/ring/service/Callback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 23; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ConfigurationCallback::SwigDirector_ConfigurationCallback(JNIEnv *jenv) : ConfigurationCallback(), Swig::Director(jenv) {
}

SwigDirector_ConfigurationCallback::~SwigDirector_ConfigurationCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ConfigurationCallback::configOnVolumeChange(std::string const &device, int value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdevice = 0 ;
  jint jvalue  ;
  
  if (!swig_override[0]) {
    ConfigurationCallback::configOnVolumeChange(device,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdevice = jenv->NewStringUTF((&device)->c_str()); 
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[23], swigjobj, jdevice, jvalue);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::configOnAccountsChange() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    ConfigurationCallback::configOnAccountsChange();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[24], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::configOnHistoryChange() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    ConfigurationCallback::configOnHistoryChange();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[25], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::configOnStunStatusFail(std::string const &account_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  
  if (!swig_override[3]) {
    ConfigurationCallback::configOnStunStatusFail(account_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[26], swigjobj, jaccount_id);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::configOnRegistrationStateChange(std::string const &account_id, int state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jint jstate  ;
  
  if (!swig_override[4]) {
    ConfigurationCallback::configOnRegistrationStateChange(account_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str()); 
    jstate = (jint) state;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[27], swigjobj, jaccount_id, jstate);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::configOnSipRegistrationStateChange(std::string const &account_id, std::string const &state, int code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jstate = 0 ;
  jint jcode  ;
  
  if (!swig_override[5]) {
    ConfigurationCallback::configOnSipRegistrationStateChange(account_id,state,code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str()); 
    jstate = jenv->NewStringUTF((&state)->c_str()); 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[28], swigjobj, jaccount_id, jstate, jcode);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::configOnError(int alert) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jalert  ;
  
  if (!swig_override[6]) {
    ConfigurationCallback::configOnError(alert);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jalert = (jint) alert;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[29], swigjobj, jalert);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< int32_t > SwigDirector_ConfigurationCallback::configGetHardwareAudioFormat() {
  std::vector< int32_t > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< int32_t > *argp ;
  
  if (!swig_override[7]) {
    return ConfigurationCallback::configGetHardwareAudioFormat();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_RingserviceJNI, Swig::director_methids[30], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(std::vector< int32_t > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< int32_t >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ConfigurationCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "configOnVolumeChange", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "configOnAccountsChange", "()V", NULL 
    },
    {
      "configOnHistoryChange", "()V", NULL 
    },
    {
      "configOnStunStatusFail", "(Ljava/lang/String;)V", NULL 
    },
    {
      "configOnRegistrationStateChange", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "configOnSipRegistrationStateChange", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "configOnError", "(I)V", NULL 
    },
    {
      "configGetHardwareAudioFormat", "()Lcx/ring/service/IntVect;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("cx/ring/service/ConfigurationCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1StringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1StringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_StringMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1StringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1StringVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1StringVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_StringVect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1StringVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1VectMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >();
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1VectMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > >::size_type arg1 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::map< std::string,std::string > >::size_type)jarg1; 
  result = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >(arg1);
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::map< std::string,std::string > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::map< std::string,std::string > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (std::vector< std::map< std::string,std::string > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = (bool)((std::vector< std::map< std::string,std::string > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::map< std::string,std::string > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::map< std::string,std::string > >::value_type *) &std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::map< std::string,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_VectMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::map< std::string,std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1VectMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1IntegerMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1IntegerMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_int_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_IntegerMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1IntegerMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1IntVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int32_t > *)new std::vector< int32_t >();
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1IntVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int32_t > *)new std::vector< int32_t >(arg1);
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = (bool)((std::vector< int32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int32_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_IntVect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int32_t_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1IntVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1fini(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  sflph_fini();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1poll_1events(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  sflph_poll_events();
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1place(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)sflph_call_place((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1refuse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_refuse((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1accept(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_accept((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1hang_1up(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_hang_up((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1hold(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_hold((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1unhold(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_unhold((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1transfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_call_transfer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1attended_1transfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_call_attended_transfer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1call_1details(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_call_get_call_details((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1call_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_call_get_call_list();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1remove_1conference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_remove_conference((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1join_1participant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_call_join_participant((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1create_1conf_1from_1participant_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  sflph_call_create_conf_from_participant_list((std::vector< std::string > const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1is_1conference_1participant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_is_conference_participant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1add_1participant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_call_add_participant((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1add_1main_1participant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_add_main_participant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1detach_1participant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_detach_participant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1join_1conference(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_call_join_conference((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1hang_1up_1conference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_hang_up_conference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1hold_1conference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_hold_conference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1unhold_1conference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_unhold_conference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1conference_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_call_get_conference_list();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1participant_1list(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_call_get_participant_list((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1display_1names(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_call_get_display_names((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1conference_1id(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_call_get_conference_id((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1conference_1details(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_call_get_conference_details((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1play_1recorded_1file(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_play_recorded_file((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1stop_1recorded_1file(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_stop_recorded_file((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1toggle_1recording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_toggle_recording((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1set_1recording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_set_recording((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1record_1playback_1seek(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  sflph_call_record_playback_seek(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1is_1recording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_call_is_recording((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1current_1audio_1codec_1name(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_call_get_current_audio_codec_name((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1play_1dtmf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_play_dtmf((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1start_1tone(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  int arg1 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  sflph_call_start_tone(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1set_1sas_1verified(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_set_sas_verified((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1reset_1sas_1verified(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_reset_sas_verified((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1set_1confirm_1go_1clear(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_set_confirm_go_clear((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1request_1go_1clear(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_call_request_go_clear((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1accept_1enrollment(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  sflph_call_accept_enrollment((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1call_1send_1text_1message(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  sflph_call_send_text_message((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Callback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->callOnStateChange((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::callOnStateChange((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->callOnTransferFail();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferFailSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->Callback::callOnTransferFail();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferSuccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->callOnTransferSuccess();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferSuccessSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->Callback::callOnTransferSuccess();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnRecordPlaybackStopped((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackStoppedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnRecordPlaybackStopped((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnVoiceMailNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->callOnVoiceMailNotify((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnVoiceMailNotifySwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::callOnVoiceMailNotify((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->callOnIncomingMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingMessageSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::callOnIncomingMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->callOnIncomingCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::callOnIncomingCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackFilepath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->callOnRecordPlaybackFilepath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackFilepathSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::callOnRecordPlaybackFilepath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnConferenceCreated((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceCreatedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnConferenceCreated((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->callOnConferenceChanged((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::callOnConferenceChanged((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnUpdatePlaybackScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->callOnUpdatePlaybackScale((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnUpdatePlaybackScaleSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Callback::callOnUpdatePlaybackScale((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnConferenceRemove((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceRemoveSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnConferenceRemove((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnNewCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->callOnNewCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnNewCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::callOnNewCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSipCallStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->callOnSipCallStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSipCallStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->Callback::callOnSipCallStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->callOnRecordStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::callOnRecordStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnSecureSdesOn((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOnSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnSecureSdesOn((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnSecureSdesOff((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOffSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnSecureSdesOff((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->callOnSecureZrtpOn((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOnSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::callOnSecureZrtpOn((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOff(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnSecureZrtpOff((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOffSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnSecureZrtpOff((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnShowSas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->callOnShowSas((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnShowSasSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->Callback::callOnShowSas((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNotSuppOther(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->callOnZrtpNotSuppOther((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNotSuppOtherSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::callOnZrtpNotSuppOther((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNegotiationFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->callOnZrtpNegotiationFail((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNegotiationFailSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::callOnZrtpNegotiationFail((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRtcpReceiveReport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return ;
  } 
  (arg1)->callOnRtcpReceiveReport((std::string const &)*arg2,(std::map< std::string,int > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1callOnRtcpReceiveReportSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return ;
  } 
  (arg1)->Callback::callOnRtcpReceiveReport((std::string const &)*arg2,(std::map< std::string,int > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1Callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Callback *)new SwigDirector_Callback(jenv);
  *(Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Callback *obj = *((Callback **)&objarg);
  (void)jcls;
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_Callback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Callback *obj = *((Callback **)&objarg);
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1account_1details(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_config_get_account_details((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1account_1details(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  sflph_config_set_account_details((std::string const &)*arg1,(std::map< std::string,std::string > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1account_1template(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_account_template();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1add_1account(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = sflph_config_add_account((std::map< std::string,std::string > const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1remove_1account(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_config_remove_account((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1account_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_account_list();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1send_1register(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  sflph_config_send_register((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1register_1all_1accounts(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  sflph_config_register_all_accounts();
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1tls_1default_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_tls_default_settings();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1codec_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_audio_codec_list();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1supported_1tls_1method(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_supported_tls_method();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1codec_1details(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = sflph_config_get_audio_codec_details(arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1active_1audio_1codec_1list(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_config_get_active_audio_codec_list((std::string const &)*arg1);
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1active_1audio_1codec_1list(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  sflph_config_set_active_audio_codec_list((std::vector< std::string > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1plugin_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_audio_plugin_list();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1plugin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_config_set_audio_plugin((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1output_1device_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_audio_output_device_list();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1output_1device(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  sflph_config_set_audio_output_device(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1input_1device(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  sflph_config_set_audio_input_device(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1ringtone_1device(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  sflph_config_set_audio_ringtone_device(arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1input_1device_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_audio_input_device_list();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1current_1audio_1devices_1index(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_current_audio_devices_index();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1input_1device_1index(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)sflph_config_get_audio_input_device_index((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1output_1device_1index(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)sflph_config_get_audio_output_device_index((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1current_1audio_1output_1plugin(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_current_audio_output_plugin();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1noise_1suppress_1state(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)sflph_config_get_noise_suppress_state();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1noise_1suppress_1state(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  sflph_config_set_noise_suppress_state(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1agc_1enabled(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)sflph_config_is_agc_enabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1enable_1agc(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  sflph_config_enable_agc(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1mute_1dtmf(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  sflph_config_mute_dtmf(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1dtmf_1muted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)sflph_config_is_dtmf_muted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1capture_1muted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)sflph_config_is_capture_muted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1mute_1capture(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  sflph_config_mute_capture(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1playback_1muted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)sflph_config_is_playback_muted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1mute_1playback(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  sflph_config_mute_playback(arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1ringtone_1list(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_ringtone_list();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1manager(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_audio_manager();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1manager(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_config_set_audio_manager((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1supported_1audio_1managers(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_supported_audio_managers();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1iax2_1enabled(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sflph_config_is_iax2_enabled();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1record_1path(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_record_path();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1record_1path(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_config_set_record_path((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1always_1recording(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)sflph_config_is_always_recording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1always_1recording(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  sflph_config_set_always_recording(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1history_1limit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  sflph_config_set_history_limit(arg1);
}


SWIGEXPORT jint JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1history_1limit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)sflph_config_get_history_limit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1clear_1history(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  sflph_config_clear_history();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1accounts_1order(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  sflph_config_set_accounts_order((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1hook_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_hook_settings();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1hook_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  sflph_config_set_hook_settings((std::map< std::string,std::string > const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1history(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_history();
  *(std::vector< std::map< std::string,std::string > > **)&jresult = new std::vector< std::map< std::string,std::string > >((const std::vector< std::map< std::string,std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1tls_1settings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_tls_settings();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1tls_1settings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  sflph_config_set_tls_settings((std::map< std::string,std::string > const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1ip2ip_1details(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_ip2ip_details();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1credentials(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_config_get_credentials((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string > > **)&jresult = new std::vector< std::map< std::string,std::string > >((const std::vector< std::map< std::string,std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1credentials(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< std::map< std::string,std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > > const & reference is null");
    return ;
  } 
  sflph_config_set_credentials((std::string const &)*arg1,(std::vector< std::map< std::string,std::string > > const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1addr_1from_1interface_1name(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = sflph_config_get_addr_from_interface_name((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1all_1ip_1interface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_all_ip_interface();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1all_1ip_1interface_1by_1name(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_all_ip_interface_by_name();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1shortcuts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = sflph_config_get_shortcuts();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1shortcuts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  sflph_config_set_shortcuts((std::map< std::string,std::string > const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1volume(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  std::string *arg1 = 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  sflph_config_set_volume((std::string const &)*arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1volume(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (double)sflph_config_get_volume((std::string const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1check_1for_1private_1key(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)sflph_config_check_for_private_key((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1check_1certificate_1validity(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_config_check_certificate_validity((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_service_RingserviceJNI_sflph_1config_1check_1hostname_1certificate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)sflph_config_check_hostname_certificate((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_delete_1ConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnVolumeChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->configOnVolumeChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnVolumeChangeSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->ConfigurationCallback::configOnVolumeChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnAccountsChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->configOnAccountsChange();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnAccountsChangeSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->ConfigurationCallback::configOnAccountsChange();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnHistoryChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->configOnHistoryChange();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnHistoryChangeSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->ConfigurationCallback::configOnHistoryChange();
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnStunStatusFail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->configOnStunStatusFail((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnStunStatusFailSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::configOnStunStatusFail((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnRegistrationStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->configOnRegistrationStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnRegistrationStateChangeSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->ConfigurationCallback::configOnRegistrationStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnSipRegistrationStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->configOnSipRegistrationStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnSipRegistrationStateChangeSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->ConfigurationCallback::configOnSipRegistrationStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->configOnError(arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnErrorSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ConfigurationCallback::configOnError(arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configGetHardwareAudioFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< int32_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  result = (arg1)->configGetHardwareAudioFormat();
  *(std::vector< int32_t > **)&jresult = new std::vector< int32_t >((const std::vector< int32_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configGetHardwareAudioFormatSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< int32_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  result = (arg1)->ConfigurationCallback::configGetHardwareAudioFormat();
  *(std::vector< int32_t > **)&jresult = new std::vector< int32_t >((const std::vector< int32_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_service_RingserviceJNI_new_1ConfigurationCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConfigurationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConfigurationCallback *)new SwigDirector_ConfigurationCallback(jenv);
  *(ConfigurationCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ConfigurationCallback *obj = *((ConfigurationCallback **)&objarg);
  (void)jcls;
  SwigDirector_ConfigurationCallback *director = dynamic_cast<SwigDirector_ConfigurationCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ConfigurationCallback *obj = *((ConfigurationCallback **)&objarg);
  SwigDirector_ConfigurationCallback *director = dynamic_cast<SwigDirector_ConfigurationCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  Callback *arg2 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(Callback **)&jarg2; 
  init(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_service_RingserviceJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[31] = {
    {
      "SwigDirector_Callback_callOnStateChange", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnTransferFail", "(Lcx/ring/service/Callback;)V" 
    },
    {
      "SwigDirector_Callback_callOnTransferSuccess", "(Lcx/ring/service/Callback;)V" 
    },
    {
      "SwigDirector_Callback_callOnRecordPlaybackStopped", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnVoiceMailNotify", "(Lcx/ring/service/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_callOnIncomingMessage", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnIncomingCall", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnRecordPlaybackFilepath", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnConferenceCreated", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnConferenceChanged", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnUpdatePlaybackScale", "(Lcx/ring/service/Callback;Ljava/lang/String;II)V" 
    },
    {
      "SwigDirector_Callback_callOnConferenceRemove", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnNewCall", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnSipCallStateChange", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_callOnRecordStateChange", "(Lcx/ring/service/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_callOnSecureSdesOn", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnSecureSdesOff", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnSecureZrtpOn", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnSecureZrtpOff", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnShowSas", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_callOnZrtpNotSuppOther", "(Lcx/ring/service/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnZrtpNegotiationFail", "(Lcx/ring/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_callOnRtcpReceiveReport", "(Lcx/ring/service/Callback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnVolumeChange", "(Lcx/ring/service/ConfigurationCallback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnAccountsChange", "(Lcx/ring/service/ConfigurationCallback;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnHistoryChange", "(Lcx/ring/service/ConfigurationCallback;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnStunStatusFail", "(Lcx/ring/service/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnRegistrationStateChange", "(Lcx/ring/service/ConfigurationCallback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnSipRegistrationStateChange", "(Lcx/ring/service/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configOnError", "(Lcx/ring/service/ConfigurationCallback;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_configGetHardwareAudioFormat", "(Lcx/ring/service/ConfigurationCallback;)J" 
    }
  };
  Swig::jclass_RingserviceJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_RingserviceJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

#include "logger.h"

JavaVM *gJavaVM;
const char *ksflphoneservicePath = "cx/ring/service/RingserviceJNI";

void deinitClassHelper(JNIEnv *env, jobject obj) {
	SFL_INFO("deinitClassHelper");

	/* delete cached object instances */
    env->DeleteGlobalRef(obj);
	SFL_INFO("deinitClassHelper: object %x deleted", obj);
}

JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {
	JNIEnv *env;
	jclass clazz;
	jint r;

    SFL_INFO("JNI_OnLoad");

	//Assume it is c++
	r = vm->GetEnv ((void **) &env, JNI_VERSION_1_6);
    if (r != JNI_OK) {
		RING_ERR("JNI_OnLoad: failed to get the environment using GetEnv()");
        return -1;
    }
	SFL_INFO("JNI_Onload: GetEnv %p", env);

	clazz = env->FindClass (ksflphoneservicePath);
	if (!clazz) {
        RING_ERR("JNI_Onload: whoops, %s class not found!", ksflphoneservicePath);
	}
	gJavaVM = vm;
	SFL_INFO("JNI_Onload: JavaVM %p", gJavaVM);

	/* put instances of class object we need into cache */
    //initClassHelper(env, kManagerPath, &gManagerObject);

	JNINativeMethod methods[] = {

	{"new_StringMap__SWIG_0", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1StringMap_1_1SWIG_10},
{"new_StringMap__SWIG_1", "(JLorg/sflphone/service/StringMap;)J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1StringMap_1_1SWIG_11},
{"StringMap_size", "(JLorg/sflphone/service/StringMap;)J", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1size},
{"StringMap_empty", "(JLorg/sflphone/service/StringMap;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1empty},
{"StringMap_clear", "(JLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1clear},
{"StringMap_get", "(JLorg/sflphone/service/StringMap;Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1get},
{"StringMap_set", "(JLorg/sflphone/service/StringMap;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1set},
{"StringMap_del", "(JLorg/sflphone/service/StringMap;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1del},
{"StringMap_has_key", "(JLorg/sflphone/service/StringMap;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_StringMap_1has_1key},
{"delete_StringMap", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1StringMap},
{"new_StringVect__SWIG_0", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1StringVect_1_1SWIG_10},
{"new_StringVect__SWIG_1", "(J)J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1StringVect_1_1SWIG_11},
{"StringVect_size", "(JLorg/sflphone/service/StringVect;)J", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1size},
{"StringVect_capacity", "(JLorg/sflphone/service/StringVect;)J", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1capacity},
{"StringVect_reserve", "(JLorg/sflphone/service/StringVect;J)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1reserve},
{"StringVect_isEmpty", "(JLorg/sflphone/service/StringVect;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1isEmpty},
{"StringVect_clear", "(JLorg/sflphone/service/StringVect;)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1clear},
{"StringVect_add", "(JLorg/sflphone/service/StringVect;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1add},
{"StringVect_get", "(JLorg/sflphone/service/StringVect;I)Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1get},
{"StringVect_set", "(JLorg/sflphone/service/StringVect;ILjava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_StringVect_1set},
{"delete_StringVect", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1StringVect},
{"new_VectMap__SWIG_0", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1VectMap_1_1SWIG_10},
{"new_VectMap__SWIG_1", "(J)J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1VectMap_1_1SWIG_11},
{"VectMap_size", "(JLorg/sflphone/service/VectMap;)J", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1size},
{"VectMap_capacity", "(JLorg/sflphone/service/VectMap;)J", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1capacity},
{"VectMap_reserve", "(JLorg/sflphone/service/VectMap;J)V", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1reserve},
{"VectMap_isEmpty", "(JLorg/sflphone/service/VectMap;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1isEmpty},
{"VectMap_clear", "(JLorg/sflphone/service/VectMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1clear},
{"VectMap_add", "(JLorg/sflphone/service/VectMap;JLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1add},
{"VectMap_get", "(JLorg/sflphone/service/VectMap;I)J", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1get},
{"VectMap_set", "(JLorg/sflphone/service/VectMap;IJLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_VectMap_1set},
{"delete_VectMap", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1VectMap},
{"new_IntegerMap__SWIG_0", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1IntegerMap_1_1SWIG_10},
{"new_IntegerMap__SWIG_1", "(JLorg/sflphone/service/IntegerMap;)J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1IntegerMap_1_1SWIG_11},
{"IntegerMap_size", "(JLorg/sflphone/service/IntegerMap;)J", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1size},
{"IntegerMap_empty", "(JLorg/sflphone/service/IntegerMap;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1empty},
{"IntegerMap_clear", "(JLorg/sflphone/service/IntegerMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1clear},
{"IntegerMap_get", "(JLorg/sflphone/service/IntegerMap;Ljava/lang/String;)I", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1get},
{"IntegerMap_set", "(JLorg/sflphone/service/IntegerMap;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1set},
{"IntegerMap_del", "(JLorg/sflphone/service/IntegerMap;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1del},
{"IntegerMap_has_key", "(JLorg/sflphone/service/IntegerMap;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_IntegerMap_1has_1key},
{"delete_IntegerMap", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1IntegerMap},
{"new_IntVect__SWIG_0", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1IntVect_1_1SWIG_10},
{"new_IntVect__SWIG_1", "(J)J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1IntVect_1_1SWIG_11},
{"IntVect_size", "(JLorg/sflphone/service/IntVect;)J", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1size},
{"IntVect_capacity", "(JLorg/sflphone/service/IntVect;)J", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1capacity},
{"IntVect_reserve", "(JLorg/sflphone/service/IntVect;J)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1reserve},
{"IntVect_isEmpty", "(JLorg/sflphone/service/IntVect;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1isEmpty},
{"IntVect_clear", "(JLorg/sflphone/service/IntVect;)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1clear},
{"IntVect_add", "(JLorg/sflphone/service/IntVect;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1add},
{"IntVect_get", "(JLorg/sflphone/service/IntVect;I)I", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1get},
{"IntVect_set", "(JLorg/sflphone/service/IntVect;II)V", (void*)& Java_cx_ring_service_RingserviceJNI_IntVect_1set},
{"delete_IntVect", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1IntVect},
{"sflph_fini", "()V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1fini},
{"sflph_poll_events", "()V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1poll_1events},
{"sflph_call_place", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1place},
{"sflph_call_refuse", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1refuse},
{"sflph_call_accept", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1accept},
{"sflph_call_hang_up", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1hang_1up},
{"sflph_call_hold", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1hold},
{"sflph_call_unhold", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1unhold},
{"sflph_call_transfer", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1transfer},
{"sflph_call_attended_transfer", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1attended_1transfer},
{"sflph_call_get_call_details", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1call_1details},
{"sflph_call_get_call_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1call_1list},
{"sflph_call_remove_conference", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1remove_1conference},
{"sflph_call_join_participant", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1join_1participant},
{"sflph_call_create_conf_from_participant_list", "(JLorg/sflphone/service/StringVect;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1create_1conf_1from_1participant_1list},
{"sflph_call_is_conference_participant", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1is_1conference_1participant},
{"sflph_call_add_participant", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1add_1participant},
{"sflph_call_add_main_participant", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1add_1main_1participant},
{"sflph_call_detach_participant", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1detach_1participant},
{"sflph_call_join_conference", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1join_1conference},
{"sflph_call_hang_up_conference", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1hang_1up_1conference},
{"sflph_call_hold_conference", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1hold_1conference},
{"sflph_call_unhold_conference", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1unhold_1conference},
{"sflph_call_get_conference_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1conference_1list},
{"sflph_call_get_participant_list", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1participant_1list},
{"sflph_call_get_display_names", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1display_1names},
{"sflph_call_get_conference_id", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1conference_1id},
{"sflph_call_get_conference_details", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1conference_1details},
{"sflph_call_play_recorded_file", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1play_1recorded_1file},
{"sflph_call_stop_recorded_file", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1stop_1recorded_1file},
{"sflph_call_toggle_recording", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1toggle_1recording},
{"sflph_call_set_recording", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1set_1recording},
{"sflph_call_record_playback_seek", "(D)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1record_1playback_1seek},
{"sflph_call_is_recording", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1is_1recording},
{"sflph_call_get_current_audio_codec_name", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1get_1current_1audio_1codec_1name},
{"sflph_call_play_dtmf", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1play_1dtmf},
{"sflph_call_start_tone", "(II)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1start_1tone},
{"sflph_call_set_sas_verified", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1set_1sas_1verified},
{"sflph_call_reset_sas_verified", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1reset_1sas_1verified},
{"sflph_call_set_confirm_go_clear", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1set_1confirm_1go_1clear},
{"sflph_call_request_go_clear", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1request_1go_1clear},
{"sflph_call_accept_enrollment", "(Ljava/lang/String;Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1accept_1enrollment},
{"sflph_call_send_text_message", "(Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1call_1send_1text_1message},
{"delete_Callback", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1Callback},
{"Callback_callOnStateChange", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnStateChange},
{"Callback_callOnStateChangeSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnStateChangeSwigExplicitCallback},
{"Callback_callOnTransferFail", "(JLorg/sflphone/service/Callback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferFail},
{"Callback_callOnTransferFailSwigExplicitCallback", "(JLorg/sflphone/service/Callback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferFailSwigExplicitCallback},
{"Callback_callOnTransferSuccess", "(JLorg/sflphone/service/Callback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferSuccess},
{"Callback_callOnTransferSuccessSwigExplicitCallback", "(JLorg/sflphone/service/Callback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnTransferSuccessSwigExplicitCallback},
{"Callback_callOnRecordPlaybackStopped", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackStopped},
{"Callback_callOnRecordPlaybackStoppedSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackStoppedSwigExplicitCallback},
{"Callback_callOnVoiceMailNotify", "(JLorg/sflphone/service/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnVoiceMailNotify},
{"Callback_callOnVoiceMailNotifySwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnVoiceMailNotifySwigExplicitCallback},
{"Callback_callOnIncomingMessage", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingMessage},
{"Callback_callOnIncomingMessageSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingMessageSwigExplicitCallback},
{"Callback_callOnIncomingCall", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingCall},
{"Callback_callOnIncomingCallSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnIncomingCallSwigExplicitCallback},
{"Callback_callOnRecordPlaybackFilepath", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackFilepath},
{"Callback_callOnRecordPlaybackFilepathSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordPlaybackFilepathSwigExplicitCallback},
{"Callback_callOnConferenceCreated", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceCreated},
{"Callback_callOnConferenceCreatedSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceCreatedSwigExplicitCallback},
{"Callback_callOnConferenceChanged", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceChanged},
{"Callback_callOnConferenceChangedSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceChangedSwigExplicitCallback},
{"Callback_callOnUpdatePlaybackScale", "(JLorg/sflphone/service/Callback;Ljava/lang/String;II)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnUpdatePlaybackScale},
{"Callback_callOnUpdatePlaybackScaleSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;II)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnUpdatePlaybackScaleSwigExplicitCallback},
{"Callback_callOnConferenceRemove", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceRemove},
{"Callback_callOnConferenceRemoveSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnConferenceRemoveSwigExplicitCallback},
{"Callback_callOnNewCall", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnNewCall},
{"Callback_callOnNewCallSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnNewCallSwigExplicitCallback},
{"Callback_callOnSipCallStateChange", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSipCallStateChange},
{"Callback_callOnSipCallStateChangeSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSipCallStateChangeSwigExplicitCallback},
{"Callback_callOnRecordStateChange", "(JLorg/sflphone/service/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordStateChange},
{"Callback_callOnRecordStateChangeSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRecordStateChangeSwigExplicitCallback},
{"Callback_callOnSecureSdesOn", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOn},
{"Callback_callOnSecureSdesOnSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOnSwigExplicitCallback},
{"Callback_callOnSecureSdesOff", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOff},
{"Callback_callOnSecureSdesOffSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureSdesOffSwigExplicitCallback},
{"Callback_callOnSecureZrtpOn", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOn},
{"Callback_callOnSecureZrtpOnSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOnSwigExplicitCallback},
{"Callback_callOnSecureZrtpOff", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOff},
{"Callback_callOnSecureZrtpOffSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnSecureZrtpOffSwigExplicitCallback},
{"Callback_callOnShowSas", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnShowSas},
{"Callback_callOnShowSasSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnShowSasSwigExplicitCallback},
{"Callback_callOnZrtpNotSuppOther", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNotSuppOther},
{"Callback_callOnZrtpNotSuppOtherSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNotSuppOtherSwigExplicitCallback},
{"Callback_callOnZrtpNegotiationFail", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNegotiationFail},
{"Callback_callOnZrtpNegotiationFailSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnZrtpNegotiationFailSwigExplicitCallback},
{"Callback_callOnRtcpReceiveReport", "(JLorg/sflphone/service/Callback;Ljava/lang/String;JLorg/sflphone/service/IntegerMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRtcpReceiveReport},
{"Callback_callOnRtcpReceiveReportSwigExplicitCallback", "(JLorg/sflphone/service/Callback;Ljava/lang/String;JLorg/sflphone/service/IntegerMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1callOnRtcpReceiveReportSwigExplicitCallback},
{"new_Callback", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1Callback},
{"Callback_director_connect", "(Lorg/sflphone/service/Callback;JZZ)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1director_1connect},
{"Callback_change_ownership", "(Lorg/sflphone/service/Callback;JZ)V", (void*)& Java_cx_ring_service_RingserviceJNI_Callback_1change_1ownership},
{"sflph_config_get_account_details", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1account_1details},
{"sflph_config_set_account_details", "(Ljava/lang/String;JLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1account_1details},
{"sflph_config_get_account_template", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1account_1template},
{"sflph_config_add_account", "(JLorg/sflphone/service/StringMap;)Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1add_1account},
{"sflph_config_remove_account", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1remove_1account},
{"sflph_config_get_account_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1account_1list},
{"sflph_config_send_register", "(Ljava/lang/String;Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1send_1register},
{"sflph_config_register_all_accounts", "()V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1register_1all_1accounts},
{"sflph_config_get_tls_default_settings", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1tls_1default_1settings},
{"sflph_config_get_audio_codec_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1codec_1list},
{"sflph_config_get_supported_tls_method", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1supported_1tls_1method},
{"sflph_config_get_audio_codec_details", "(I)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1codec_1details},
{"sflph_config_get_active_audio_codec_list", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1active_1audio_1codec_1list},
{"sflph_config_set_active_audio_codec_list", "(JLorg/sflphone/service/StringVect;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1active_1audio_1codec_1list},
{"sflph_config_get_audio_plugin_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1plugin_1list},
{"sflph_config_set_audio_plugin", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1plugin},
{"sflph_config_get_audio_output_device_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1output_1device_1list},
{"sflph_config_set_audio_output_device", "(I)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1output_1device},
{"sflph_config_set_audio_input_device", "(I)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1input_1device},
{"sflph_config_set_audio_ringtone_device", "(I)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1ringtone_1device},
{"sflph_config_get_audio_input_device_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1input_1device_1list},
{"sflph_config_get_current_audio_devices_index", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1current_1audio_1devices_1index},
{"sflph_config_get_audio_input_device_index", "(Ljava/lang/String;)I", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1input_1device_1index},
{"sflph_config_get_audio_output_device_index", "(Ljava/lang/String;)I", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1output_1device_1index},
{"sflph_config_get_current_audio_output_plugin", "()Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1current_1audio_1output_1plugin},
{"sflph_config_get_noise_suppress_state", "()Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1noise_1suppress_1state},
{"sflph_config_set_noise_suppress_state", "(Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1noise_1suppress_1state},
{"sflph_config_is_agc_enabled", "()Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1agc_1enabled},
{"sflph_config_enable_agc", "(Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1enable_1agc},
{"sflph_config_mute_dtmf", "(Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1mute_1dtmf},
{"sflph_config_is_dtmf_muted", "()Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1dtmf_1muted},
{"sflph_config_is_capture_muted", "()Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1capture_1muted},
{"sflph_config_mute_capture", "(Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1mute_1capture},
{"sflph_config_is_playback_muted", "()Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1playback_1muted},
{"sflph_config_mute_playback", "(I)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1mute_1playback},
{"sflph_config_get_ringtone_list", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1ringtone_1list},
{"sflph_config_get_audio_manager", "()Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1audio_1manager},
{"sflph_config_set_audio_manager", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1audio_1manager},
{"sflph_config_get_supported_audio_managers", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1supported_1audio_1managers},
{"sflph_config_is_iax2_enabled", "()I", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1iax2_1enabled},
{"sflph_config_get_record_path", "()Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1record_1path},
{"sflph_config_set_record_path", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1record_1path},
{"sflph_config_is_always_recording", "()Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1is_1always_1recording},
{"sflph_config_set_always_recording", "(Z)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1always_1recording},
{"sflph_config_set_history_limit", "(I)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1history_1limit},
{"sflph_config_get_history_limit", "()I", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1history_1limit},
{"sflph_config_clear_history", "()V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1clear_1history},
{"sflph_config_set_accounts_order", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1accounts_1order},
{"sflph_config_get_hook_settings", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1hook_1settings},
{"sflph_config_set_hook_settings", "(JLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1hook_1settings},
{"sflph_config_get_history", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1history},
{"sflph_config_get_tls_settings", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1tls_1settings},
{"sflph_config_set_tls_settings", "(JLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1tls_1settings},
{"sflph_config_get_ip2ip_details", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1ip2ip_1details},
{"sflph_config_get_credentials", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1credentials},
{"sflph_config_set_credentials", "(Ljava/lang/String;JLorg/sflphone/service/VectMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1credentials},
{"sflph_config_get_addr_from_interface_name", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1addr_1from_1interface_1name},
{"sflph_config_get_all_ip_interface", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1all_1ip_1interface},
{"sflph_config_get_all_ip_interface_by_name", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1all_1ip_1interface_1by_1name},
{"sflph_config_get_shortcuts", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1shortcuts},
{"sflph_config_set_shortcuts", "(JLorg/sflphone/service/StringMap;)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1shortcuts},
{"sflph_config_set_volume", "(Ljava/lang/String;D)V", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1set_1volume},
{"sflph_config_get_volume", "(Ljava/lang/String;)D", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1get_1volume},
{"sflph_config_check_for_private_key", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1check_1for_1private_1key},
{"sflph_config_check_certificate_validity", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1check_1certificate_1validity},
{"sflph_config_check_hostname_certificate", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_service_RingserviceJNI_sflph_1config_1check_1hostname_1certificate},
{"delete_ConfigurationCallback", "(J)V", (void*)& Java_cx_ring_service_RingserviceJNI_delete_1ConfigurationCallback},
{"ConfigurationCallback_configOnVolumeChange", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnVolumeChange},
{"ConfigurationCallback_configOnVolumeChangeSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnVolumeChangeSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configOnAccountsChange", "(JLorg/sflphone/service/ConfigurationCallback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnAccountsChange},
{"ConfigurationCallback_configOnAccountsChangeSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnAccountsChangeSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configOnHistoryChange", "(JLorg/sflphone/service/ConfigurationCallback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnHistoryChange},
{"ConfigurationCallback_configOnHistoryChangeSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnHistoryChangeSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configOnStunStatusFail", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnStunStatusFail},
{"ConfigurationCallback_configOnStunStatusFailSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnStunStatusFailSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configOnRegistrationStateChange", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnRegistrationStateChange},
{"ConfigurationCallback_configOnRegistrationStateChangeSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnRegistrationStateChangeSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configOnSipRegistrationStateChange", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnSipRegistrationStateChange},
{"ConfigurationCallback_configOnSipRegistrationStateChangeSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnSipRegistrationStateChangeSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configOnError", "(JLorg/sflphone/service/ConfigurationCallback;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnError},
{"ConfigurationCallback_configOnErrorSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;I)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configOnErrorSwigExplicitConfigurationCallback},
{"ConfigurationCallback_configGetHardwareAudioFormat", "(JLorg/sflphone/service/ConfigurationCallback;)J", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configGetHardwareAudioFormat},
{"ConfigurationCallback_configGetHardwareAudioFormatSwigExplicitConfigurationCallback", "(JLorg/sflphone/service/ConfigurationCallback;)J", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1configGetHardwareAudioFormatSwigExplicitConfigurationCallback},
{"new_ConfigurationCallback", "()J", (void*)& Java_cx_ring_service_RingserviceJNI_new_1ConfigurationCallback},
{"ConfigurationCallback_director_connect", "(Lorg/sflphone/service/ConfigurationCallback;JZZ)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1director_1connect},
{"ConfigurationCallback_change_ownership", "(Lorg/sflphone/service/ConfigurationCallback;JZ)V", (void*)& Java_cx_ring_service_RingserviceJNI_ConfigurationCallback_1change_1ownership},
{"init", "(JLorg/sflphone/service/ConfigurationCallback;JLorg/sflphone/service/Callback;)V", (void*)& Java_cx_ring_service_RingserviceJNI_init}

	};

	r = env->RegisterNatives (clazz, methods, (int) (sizeof(methods) / sizeof(methods[0])));
	return JNI_VERSION_1_6;
}

void JNI_OnUnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env;
	jclass clazz;

	SFL_INFO("JNI_OnUnLoad");

	/* get env */
    if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
		RING_ERR("JNI_OnUnLoad: failed to get the environment using GetEnv()");
        return;
    }
	SFL_INFO("JNI_OnUnLoad: GetEnv %p", env);

    /* Get jclass with env->FindClass */
	clazz = env->FindClass(ksflphoneservicePath);
	if (!clazz) {
        RING_ERR("JNI_OnUnLoad: whoops, %s class not found!", ksflphoneservicePath);
	}

	/* remove instances of class object we need into cache */
    //deinitClassHelper(env, gManagerObject);

	env->UnregisterNatives(clazz);
	SFL_INFO("JNI_OnUnLoad: Native functions unregistered");
}
