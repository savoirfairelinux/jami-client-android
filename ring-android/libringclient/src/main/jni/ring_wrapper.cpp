/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_RingserviceJNI = NULL;
    jmethodID director_method_ids[46];
  }
}

#include <string>


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header



#include <android/log.h>


SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::string > std_map_Sl_std_string_Sc_std_string_Sg__keys(std::map< std::string,std::string > const *self){
        std::vector<std::string> k;
        k.reserve(self->size());
        for (const auto& i : *self) {
            k.push_back(i.first);
        }
        return k;
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setRaw(std::map< std::string,std::string > *self,std::string key,std::vector< uint8_t > const &value){
        (*self)[key] = std::string(value.data(), value.data()+value.size());
    }
SWIGINTERN std::vector< uint8_t > std_map_Sl_std_string_Sc_std_string_Sg__getRaw(std::map< std::string,std::string > *self,std::string key){
        auto& v = self->at(key);
        return {v.begin(), v.end()};
    }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &in){
    const std::string old = self->at(i);
    self->at(i) = in;
    return old;
  }
SWIGINTERN bool std_vector_Sl_std_string_Sg__add(std::vector< std::string > *self,std::vector< std::string >::value_type const &in){
    self->push_back(in);
    return true;
  }
SWIGINTERN int32_t std_vector_Sl_std_string_Sg__size(std::vector< std::string > const *self){
    return self->size();
  }
SWIGINTERN std::vector< std::map< std::string,std::string > >::const_reference std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(std::vector< std::map< std::string,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(std::vector< std::map< std::string,std::string > > *self,int i,std::vector< std::map< std::string,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN int const &std_map_Sl_std_string_Sc_int_Sg__get(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__set(std::map< std::string,int > *self,std::string const &key,int const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_int_Sg__del(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_int_Sg__has_key(std::map< std::string,int > *self,std::string const &key){
                std::map<std::string,int >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int32_t_Sg__get(std::vector< int32_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int32_t_Sg__set(std::vector< int32_t > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned int >::const_reference std_vector_Sl_uint32_t_Sg__get(std::vector< uint32_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__set(std::vector< uint32_t > *self,int i,std::vector< unsigned int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_uint8_t_Sg__get(std::vector< uint8_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint8_t_Sg__set(std::vector< uint8_t > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }


#include <functional>



#include "dring/dring.h"



#include "dring/dring.h"
#include "dring/callmanager_interface.h"

class Callback {
public:
    virtual ~Callback() {}
    virtual void callStateChanged(const std::string& call_id, const std::string& state, int detail_code){}
    virtual void transferFailed(void){}
    virtual void transferSucceeded(void){}
    virtual void recordPlaybackStopped(const std::string& path){}
    virtual void voiceMailNotify(const std::string& call_id, int nd_msg){}
    virtual void incomingMessage(const std::string& id, const std::string& from, const std::map<std::string, std::string>& messages){}
    virtual void incomingCall(const std::string& account_id, const std::string& call_id, const std::string& from){}
    virtual void recordPlaybackFilepath(const std::string& id, const std::string& filename){}
    virtual void conferenceCreated(const std::string& conf_id){}
    virtual void conferenceChanged(const std::string& conf_id, const std::string& state){}
    virtual void conferenceRemoved(const std::string& conf_id){}
    virtual void newCallCreated(const std::string& call_id, const std::string&, const std::string&){}
    virtual void updatePlaybackScale(const std::string& filepath, int position, int scale){}
    virtual void conferenceRemove(const std::string& conf_id){}
    virtual void newCall(const std::string& account_id, const std::string& call_id, const std::string& to){}
    virtual void sipCallStateChange(const std::string& call_id, const std::string& state, int code){}
    virtual void recordingStateChanged(const std::string& call_id, int code){}
    virtual void recordStateChange(const std::string& call_id, int state){}
    virtual void onRtcpReportReceived(const std::string& call_id, const std::map<std::string, int>& stats){}
    virtual void peerHold(const std::string& call_id, bool holding){}
};




#include "dring/dring.h"
#include "dring/configurationmanager_interface.h"

class ConfigurationCallback {
public:
    virtual ~ConfigurationCallback(){}
    virtual void volumeChanged(const std::string& device, int value){}
    virtual void accountsChanged(void){}
    virtual void historyChanged(void){}
    virtual void stunStatusFailure(const std::string& account_id){}
    virtual void registrationStateChanged(const std::string& account_id, const std::string& state, int code, const std::string& detail_str){}
    virtual void volatileAccountDetailsChanged(const std::string& account_id, const std::map<std::string, std::string>& details){}
    virtual void incomingAccountMessage(const std::string& /*account_id*/, const std::string& /*from*/, const std::map<std::string, std::string>& /*payload*/){}
    virtual void accountMessageStatusChanged(const std::string& /*account_id*/, uint64_t /*message_id*/, const std::string& /*to*/, int /*state*/){}
    virtual void knownDevicesChanged(const std::string& /*account_id*/, const std::map<std::string, std::string>& /*devices*/){}
    virtual void exportOnRingEnded(const std::string& /*account_id*/, int /*state*/, const std::string& /*pin*/){}

    virtual void incomingTrustRequest(const std::string& /*account_id*/, const std::string& /*from*/, const std::vector<uint8_t>& /*payload*/, time_t received){}

    virtual void certificatePinned(const std::string& /*certId*/){}
    virtual void certificatePathPinned(const std::string& /*path*/, const std::vector<std::string>& /*certId*/){}
    virtual void certificateExpired(const std::string& /*certId*/){}
    virtual void certificateStateChanged(const std::string& /*account_id*/, const std::string& /*certId*/, const std::string& /*state*/){}

    virtual void errorAlert(int alert){}
    virtual void getHardwareAudioFormat(std::vector<int32_t>* /*params_ret*/){}
    virtual void getAppDataPath(const std::string& /* name */, std::vector<std::string>* /*path_ret*/){}

    virtual void nameRegistrationEnded(const std::string& /*account_id*/, int state, const std::string& /*name*/){}
    virtual void registeredNameFound(const std::string& /*account_id*/, int state, const std::string& /*address*/, const std::string& /*name*/){}
};


#include <functional>
#include <list>
#include <mutex>

#include "dring/dring.h"
#include "dring/videomanager_interface.h"
#include <android/native_window.h>
#include <android/native_window_jni.h>
#include <android/log.h>

class VideoCallback {
public:
    virtual ~VideoCallback(){}
    virtual void getCameraInfo(const std::string& device, std::vector<int> *formats, std::vector<unsigned> *sizes, std::vector<unsigned> *rates) {}
    virtual void setParameters(const std::string, const int format, const int width, const int height, const int rate) {}
    virtual void startCapture(const std::string& camid) {}
    virtual void stopCapture() {}
    virtual void decodingStarted(const std::string& id, const std::string& shm_path, int w, int h, bool is_mixer) {}
    virtual void decodingStopped(const std::string& id, const std::string& shm_path, bool is_mixer) {}
};



std::map<ANativeWindow*, std::unique_ptr<DRing::FrameBuffer>> windows {};
std::mutex windows_mutex;

std::vector<uint8_t> workspace;

void rotateNV21(std::vector<uint8_t>& input, unsigned width, unsigned height, int rotation, uint8_t* output)
{
    if (rotation == 0) {
        std::copy_n(input.begin(), input.size(), output);
        return;
    }
    if (rotation % 90 != 0 || rotation < 0 || rotation > 270) {
        __android_log_print(ANDROID_LOG_ERROR, "videomanager.i", "%u %u %d", width, height, rotation);
        return;
    }
    unsigned frameSize = width * height;
    bool swap      = rotation % 180 != 0;
    bool xflip     = rotation % 270 != 0;
    bool yflip     = rotation >= 180;
    unsigned wOut  = swap ? height : width;
    unsigned hOut  = swap ? width  : height;

    for (unsigned j = 0; j < height; j++) {
        for (unsigned i = 0; i < width; i++) {
            unsigned yIn = j * width + i;
            unsigned uIn = frameSize + (j >> 1) * width + (i & ~1);
            unsigned vIn = uIn + 1;
            unsigned iSwapped = swap ? j : i;
            unsigned jSwapped = swap ? i : j;
            unsigned iOut     = xflip ? wOut - iSwapped - 1 : iSwapped;
            unsigned jOut     = yflip ? hOut - jSwapped - 1 : jSwapped;
            unsigned yOut = jOut * wOut + iOut;
            unsigned uOut = frameSize + (jOut >> 1) * wOut + (iOut & ~1);
            unsigned vOut = uOut + 1;
            output[yOut] = input[yIn];
            output[uOut] = input[uIn];
            output[vOut] = input[vIn];
        }
    }
    return;
}

JNIEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setVideoFrame(JNIEnv *jenv, jclass jcls, jbyteArray frame, int frame_size, jlong target, int w, int h, int rotation)
{
    uint8_t* f_target = (uint8_t*) ((intptr_t) target);
    if (rotation == 0)
         jenv->GetByteArrayRegion(frame, 0, frame_size, (jbyte*)f_target);
    else {
        workspace.resize(frame_size);
        jenv->GetByteArrayRegion(frame, 0, frame_size, (jbyte*)workspace.data());
        rotateNV21(workspace, w, h, rotation, f_target);
    }
}

JNIEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_acquireNativeWindow(JNIEnv *jenv, jclass jcls, jobject javaSurface)
{
    return (jlong)(intptr_t)ANativeWindow_fromSurface(jenv, javaSurface);
}

JNIEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_releaseNativeWindow(JNIEnv *jenv, jclass jcls, jlong window_)
{
    std::lock_guard<std::mutex> guard(windows_mutex);
    ANativeWindow *window = (ANativeWindow*)((intptr_t) window_);
    ANativeWindow_release(window);
}

JNIEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setNativeWindowGeometry(JNIEnv *jenv, jclass jcls, jlong window_, int width, int height)
{
    ANativeWindow *window = (ANativeWindow*)((intptr_t) window_);
    ANativeWindow_setBuffersGeometry(window, width, height, WINDOW_FORMAT_RGBA_8888);
}

void AndroidDisplayCb(ANativeWindow *window, std::unique_ptr<DRing::FrameBuffer> frame)
{
    std::lock_guard<std::mutex> guard(windows_mutex);
    try {
        auto& i = windows.at(window);
        ANativeWindow_Buffer buffer;
        if (ANativeWindow_lock(window, &buffer, NULL) == 0) {
            if (buffer.bits && frame && frame->ptr) {
                if (buffer.stride == frame->width)
                    memcpy(buffer.bits, frame->ptr, frame->width * frame->height * 4);
                else {
                    size_t line_size_in = frame->width * 4;
                    size_t line_size_out = buffer.stride * 4;
                    for (size_t i=0, n=frame->height; i<n; i++)
                        memcpy((uint8_t*)buffer.bits + line_size_out * i, frame->ptr + line_size_in * i, line_size_in);
                }
            }
            else
                __android_log_print(ANDROID_LOG_WARN, "videomanager.i", "Can't copy surface");
            ANativeWindow_unlockAndPost(window);
        } else {
            __android_log_print(ANDROID_LOG_WARN, "videomanager.i", "Can't lock surface");
        }
        i = std::move(frame);
    } catch (...) {
        __android_log_print(ANDROID_LOG_WARN, "videomanager.i", "Can't copy frame: no window");
    }
}

std::unique_ptr<DRing::FrameBuffer> sinkTargetPullCallback(ANativeWindow *window, std::size_t bytes)
{
    try {
        std::unique_ptr<DRing::FrameBuffer> ret;
        {
            std::lock_guard<std::mutex> guard(windows_mutex);
            ret = std::move(windows.at(window));
        }
        if (not ret) {
            __android_log_print(ANDROID_LOG_WARN, "videomanager.i", "Creating new video buffer of %zu kib", bytes/1024);
            ret.reset(new DRing::FrameBuffer());
        }
        ret->storage.resize(bytes);
        ret->ptr = ret->storage.data();
        ret->ptrSize = bytes;
        return ret;
    } catch (...) {
        return {};
    }
}

JNIEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_registerVideoCallback(JNIEnv *jenv, jclass jcls, jstring sinkId, jlong window)
{
    if(!sinkId) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
        return;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(sinkId, 0);
    if (!arg1_pstr)
        return;
    const std::string sink(arg1_pstr);
    jenv->ReleaseStringUTFChars(sinkId, arg1_pstr);

    ANativeWindow* nativeWindow = (ANativeWindow*)((intptr_t) window);
    auto f_display_cb = std::bind(&AndroidDisplayCb, nativeWindow, std::placeholders::_1);
    auto p_display_cb = std::bind(&sinkTargetPullCallback, nativeWindow, std::placeholders::_1);

    std::lock_guard<std::mutex> guard(windows_mutex);
    windows.emplace(nativeWindow, nullptr);
    DRing::registerSinkTarget(sink, DRing::SinkTarget {.pull=p_display_cb, .push=f_display_cb});
}

JNIEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_unregisterVideoCallback(JNIEnv *jenv, jclass jcls, jstring sinkId, jlong window)
{
    if(!sinkId) {
        SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
        return;
    }
    const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(sinkId, 0);
    if (!arg1_pstr)
        return;
    const std::string sink(arg1_pstr);
    jenv->ReleaseStringUTFChars(sinkId, arg1_pstr);

    std::lock_guard<std::mutex> guard(windows_mutex);
    DRing::registerSinkTarget(sink, DRing::SinkTarget {});
    ANativeWindow* nativeWindow = (ANativeWindow*)((intptr_t) window);
    windows.erase(nativeWindow);
}



/* some functions that need to be declared in *_wrap.cpp
 * that are not declared elsewhere in the c++ code
 */

void init(ConfigurationCallback* confM, Callback* callM, VideoCallback* videoM) {
    using namespace std::placeholders;

    using std::bind;
    using DRing::exportable_callback;
    using DRing::CallSignal;
    using DRing::ConfigurationSignal;
    using DRing::VideoSignal;

    using SharedCallback = std::shared_ptr<DRing::CallbackWrapperBase>;

    // Call event handlers
    const std::map<std::string, SharedCallback> callEvHandlers = {
        exportable_callback<CallSignal::StateChange>(bind(&Callback::callStateChanged, callM, _1, _2, _3)),
        exportable_callback<CallSignal::TransferFailed>(bind(&Callback::transferFailed, callM)),
        exportable_callback<CallSignal::TransferSucceeded>(bind(&Callback::transferSucceeded, callM)),
        exportable_callback<CallSignal::RecordPlaybackStopped>(bind(&Callback::recordPlaybackStopped, callM, _1)),
        exportable_callback<CallSignal::VoiceMailNotify>(bind(&Callback::voiceMailNotify, callM, _1, _2)),
        exportable_callback<CallSignal::IncomingMessage>(bind(&Callback::incomingMessage, callM, _1, _2, _3)),
        exportable_callback<CallSignal::IncomingCall>(bind(&Callback::incomingCall, callM, _1, _2, _3)),
        exportable_callback<CallSignal::RecordPlaybackFilepath>(bind(&Callback::recordPlaybackFilepath, callM, _1, _2)),
        exportable_callback<CallSignal::ConferenceCreated>(bind(&Callback::conferenceCreated, callM, _1)),
        exportable_callback<CallSignal::ConferenceChanged>(bind(&Callback::conferenceChanged, callM, _1, _2)),
        exportable_callback<CallSignal::UpdatePlaybackScale>(bind(&Callback::updatePlaybackScale, callM, _1, _2, _3)),
        exportable_callback<CallSignal::ConferenceRemoved>(bind(&Callback::conferenceRemoved, callM, _1)),
        exportable_callback<CallSignal::NewCallCreated>(bind(&Callback::newCallCreated, callM, _1, _2, _3)),
        exportable_callback<CallSignal::RecordingStateChanged>(bind(&Callback::recordingStateChanged, callM, _1, _2)),
        exportable_callback<CallSignal::RtcpReportReceived>(bind(&Callback::onRtcpReportReceived, callM, _1, _2)),
        exportable_callback<CallSignal::PeerHold>(bind(&Callback::peerHold, callM, _1, _2))
    };

    // Configuration event handlers
    const std::map<std::string, SharedCallback> configEvHandlers = {
        exportable_callback<ConfigurationSignal::VolumeChanged>(bind(&ConfigurationCallback::volumeChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::AccountsChanged>(bind(&ConfigurationCallback::accountsChanged, confM)),
        exportable_callback<ConfigurationSignal::StunStatusFailed>(bind(&ConfigurationCallback::stunStatusFailure, confM, _1)),
        exportable_callback<ConfigurationSignal::RegistrationStateChanged>(bind(&ConfigurationCallback::registrationStateChanged, confM, _1, _2, _3, _4)),
        exportable_callback<ConfigurationSignal::VolatileDetailsChanged>(bind(&ConfigurationCallback::volatileAccountDetailsChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::KnownDevicesChanged>(bind(&ConfigurationCallback::knownDevicesChanged, confM, _1, _2)),
        exportable_callback<ConfigurationSignal::ExportOnRingEnded>(bind(&ConfigurationCallback::exportOnRingEnded, confM, _1, _2, _3)),
        exportable_callback<ConfigurationSignal::Error>(bind(&ConfigurationCallback::errorAlert, confM, _1)),
        exportable_callback<ConfigurationSignal::IncomingAccountMessage>(bind(&ConfigurationCallback::incomingAccountMessage, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::AccountMessageStatusChanged>(bind(&ConfigurationCallback::accountMessageStatusChanged, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::IncomingTrustRequest>(bind(&ConfigurationCallback::incomingTrustRequest, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::CertificatePinned>(bind(&ConfigurationCallback::certificatePinned, confM, _1 )),
        exportable_callback<ConfigurationSignal::CertificatePathPinned>(bind(&ConfigurationCallback::certificatePathPinned, confM, _1, _2 )),
        exportable_callback<ConfigurationSignal::CertificateExpired>(bind(&ConfigurationCallback::certificateExpired, confM, _1 )),
        exportable_callback<ConfigurationSignal::CertificateStateChanged>(bind(&ConfigurationCallback::certificateStateChanged, confM, _1, _2, _3 )),
        exportable_callback<ConfigurationSignal::GetHardwareAudioFormat>(bind(&ConfigurationCallback::getHardwareAudioFormat, confM, _1 )),
        exportable_callback<ConfigurationSignal::GetAppDataPath>(bind(&ConfigurationCallback::getAppDataPath, confM, _1, _2 )),
        exportable_callback<ConfigurationSignal::RegisteredNameFound>(bind(&ConfigurationCallback::registeredNameFound, confM, _1, _2, _3, _4 )),
        exportable_callback<ConfigurationSignal::NameRegistrationEnded>(bind(&ConfigurationCallback::nameRegistrationEnded, confM, _1, _2, _3 ))
    };

    const std::map<std::string, SharedCallback> videoEvHandlers = {
        exportable_callback<VideoSignal::GetCameraInfo>(bind(&VideoCallback::getCameraInfo, videoM, _1, _2, _3, _4)),
        exportable_callback<VideoSignal::SetParameters>(bind(&VideoCallback::setParameters, videoM, _1, _2, _3, _4, _5)),
        exportable_callback<VideoSignal::StartCapture>(bind(&VideoCallback::startCapture, videoM, _1)),
        exportable_callback<VideoSignal::StopCapture>(bind(&VideoCallback::stopCapture, videoM)),
        exportable_callback<VideoSignal::DecodingStarted>(bind(&VideoCallback::decodingStarted, videoM, _1, _2, _3, _4, _5)),
        exportable_callback<VideoSignal::DecodingStopped>(bind(&VideoCallback::decodingStopped, videoM, _1, _2, _3)),
    };

    if (!DRing::init(static_cast<DRing::InitFlag>(DRing::DRING_FLAG_DEBUG)))
        return;

    registerCallHandlers(callEvHandlers);
    registerConfHandlers(configEvHandlers);
    registerVideoHandlers(videoEvHandlers);

    DRing::start();
}





/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ring_wrapper.h"

SwigDirector_Callback::SwigDirector_Callback(JNIEnv *jenv) : Callback(), Swig::Director(jenv) {
}

SwigDirector_Callback::~SwigDirector_Callback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Callback::callStateChanged(std::string const &call_id, std::string const &state, int detail_code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jstate = 0 ;
  jint jdetail_code  ;
  
  if (!swig_override[0]) {
    Callback::callStateChanged(call_id,state,detail_code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jdetail_code = (jint) detail_code;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[0], swigjobj, jcall_id, jstate, jdetail_code);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::callStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::transferFailed() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    Callback::transferFailed();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[1], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::transferFailed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::transferSucceeded() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    Callback::transferSucceeded();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[2], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::transferSucceeded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordPlaybackStopped(std::string const &path) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jpath = 0 ;
  
  if (!swig_override[3]) {
    Callback::recordPlaybackStopped(path);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jpath = jenv->NewStringUTF((&path)->c_str());
    Swig::LocalRefGuard path_refguard(jenv, jpath); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[3], swigjobj, jpath);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordPlaybackStopped ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::voiceMailNotify(std::string const &call_id, int nd_msg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jnd_msg  ;
  
  if (!swig_override[4]) {
    Callback::voiceMailNotify(call_id,nd_msg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jnd_msg = (jint) nd_msg;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[4], swigjobj, jcall_id, jnd_msg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::voiceMailNotify ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::incomingMessage(std::string const &id, std::string const &from, std::map< std::string,std::string > const &messages) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jfrom = 0 ;
  jlong jmessages = 0 ;
  
  if (!swig_override[5]) {
    Callback::incomingMessage(id,from,messages);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jfrom = jenv->NewStringUTF((&from)->c_str());
    Swig::LocalRefGuard from_refguard(jenv, jfrom); 
    *(std::map< std::string,std::string > **)&jmessages = (std::map< std::string,std::string > *) &messages; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[5], swigjobj, jid, jfrom, jmessages);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::incomingMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::incomingCall(std::string const &account_id, std::string const &call_id, std::string const &from) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jcall_id = 0 ;
  jstring jfrom = 0 ;
  
  if (!swig_override[6]) {
    Callback::incomingCall(account_id,call_id,from);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jfrom = jenv->NewStringUTF((&from)->c_str());
    Swig::LocalRefGuard from_refguard(jenv, jfrom); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[6], swigjobj, jaccount_id, jcall_id, jfrom);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::incomingCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordPlaybackFilepath(std::string const &id, std::string const &filename) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jfilename = 0 ;
  
  if (!swig_override[7]) {
    Callback::recordPlaybackFilepath(id,filename);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jfilename = jenv->NewStringUTF((&filename)->c_str());
    Swig::LocalRefGuard filename_refguard(jenv, jfilename); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[7], swigjobj, jid, jfilename);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordPlaybackFilepath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceCreated(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[8]) {
    Callback::conferenceCreated(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[8], swigjobj, jconf_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceCreated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceChanged(std::string const &conf_id, std::string const &state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  jstring jstate = 0 ;
  
  if (!swig_override[9]) {
    Callback::conferenceChanged(conf_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[9], swigjobj, jconf_id, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceRemoved(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[10]) {
    Callback::conferenceRemoved(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[10], swigjobj, jconf_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceRemoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::newCallCreated(std::string const &call_id, std::string const &arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[11]) {
    Callback::newCallCreated(call_id,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[11], swigjobj, jcall_id, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::newCallCreated ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::updatePlaybackScale(std::string const &filepath, int position, int scale) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jfilepath = 0 ;
  jint jposition  ;
  jint jscale  ;
  
  if (!swig_override[12]) {
    Callback::updatePlaybackScale(filepath,position,scale);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jfilepath = jenv->NewStringUTF((&filepath)->c_str());
    Swig::LocalRefGuard filepath_refguard(jenv, jfilepath); 
    jposition = (jint) position;
    jscale = (jint) scale;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[12], swigjobj, jfilepath, jposition, jscale);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::updatePlaybackScale ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::conferenceRemove(std::string const &conf_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jconf_id = 0 ;
  
  if (!swig_override[13]) {
    Callback::conferenceRemove(conf_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconf_id = jenv->NewStringUTF((&conf_id)->c_str());
    Swig::LocalRefGuard conf_id_refguard(jenv, jconf_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[13], swigjobj, jconf_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::conferenceRemove ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::newCall(std::string const &account_id, std::string const &call_id, std::string const &to) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jcall_id = 0 ;
  jstring jto = 0 ;
  
  if (!swig_override[14]) {
    Callback::newCall(account_id,call_id,to);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jto = jenv->NewStringUTF((&to)->c_str());
    Swig::LocalRefGuard to_refguard(jenv, jto); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[14], swigjobj, jaccount_id, jcall_id, jto);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::newCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::sipCallStateChange(std::string const &call_id, std::string const &state, int code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jstring jstate = 0 ;
  jint jcode  ;
  
  if (!swig_override[15]) {
    Callback::sipCallStateChange(call_id,state,code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[15], swigjobj, jcall_id, jstate, jcode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::sipCallStateChange ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordingStateChanged(std::string const &call_id, int code) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jcode  ;
  
  if (!swig_override[16]) {
    Callback::recordingStateChanged(call_id,code);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jcode = (jint) code;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[16], swigjobj, jcall_id, jcode);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordingStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::recordStateChange(std::string const &call_id, int state) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jint jstate  ;
  
  if (!swig_override[17]) {
    Callback::recordStateChange(call_id,state);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jstate = (jint) state;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[17], swigjobj, jcall_id, jstate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::recordStateChange ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::onRtcpReportReceived(std::string const &call_id, std::map< std::string,int > const &stats) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jlong jstats = 0 ;
  
  if (!swig_override[18]) {
    Callback::onRtcpReportReceived(call_id,stats);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    *(std::map< std::string,int > **)&jstats = (std::map< std::string,int > *) &stats; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[18], swigjobj, jcall_id, jstats);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::onRtcpReportReceived ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::peerHold(std::string const &call_id, bool holding) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcall_id = 0 ;
  jboolean jholding  ;
  
  if (!swig_override[19]) {
    Callback::peerHold(call_id,holding);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcall_id = jenv->NewStringUTF((&call_id)->c_str());
    Swig::LocalRefGuard call_id_refguard(jenv, jcall_id); 
    jholding = (jboolean) holding;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[19], swigjobj, jcall_id, jholding);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::peerHold ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "callStateChanged", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "transferFailed", "()V", NULL 
    },
    {
      "transferSucceeded", "()V", NULL 
    },
    {
      "recordPlaybackStopped", "(Ljava/lang/String;)V", NULL 
    },
    {
      "voiceMailNotify", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "incomingMessage", "(Ljava/lang/String;Ljava/lang/String;Lcx/ring/daemon/StringMap;)V", NULL 
    },
    {
      "incomingCall", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "recordPlaybackFilepath", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "conferenceCreated", "(Ljava/lang/String;)V", NULL 
    },
    {
      "conferenceChanged", "(Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "conferenceRemoved", "(Ljava/lang/String;)V", NULL 
    },
    {
      "newCallCreated", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "updatePlaybackScale", "(Ljava/lang/String;II)V", NULL 
    },
    {
      "conferenceRemove", "(Ljava/lang/String;)V", NULL 
    },
    {
      "newCall", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "sipCallStateChange", "(Ljava/lang/String;Ljava/lang/String;I)V", NULL 
    },
    {
      "recordingStateChanged", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "recordStateChange", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "onRtcpReportReceived", "(Ljava/lang/String;Lcx/ring/daemon/IntegerMap;)V", NULL 
    },
    {
      "peerHold", "(Ljava/lang/String;Z)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("cx/ring/daemon/Callback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 20; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ConfigurationCallback::SwigDirector_ConfigurationCallback(JNIEnv *jenv) : ConfigurationCallback(), Swig::Director(jenv) {
}

SwigDirector_ConfigurationCallback::~SwigDirector_ConfigurationCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ConfigurationCallback::volumeChanged(std::string const &device, int value) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdevice = 0 ;
  jint jvalue  ;
  
  if (!swig_override[0]) {
    ConfigurationCallback::volumeChanged(device,value);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdevice = jenv->NewStringUTF((&device)->c_str());
    Swig::LocalRefGuard device_refguard(jenv, jdevice); 
    jvalue = (jint) value;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[20], swigjobj, jdevice, jvalue);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::volumeChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::accountsChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    ConfigurationCallback::accountsChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[21], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::accountsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::historyChanged() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[2]) {
    ConfigurationCallback::historyChanged();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::historyChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::stunStatusFailure(std::string const &account_id) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  
  if (!swig_override[3]) {
    ConfigurationCallback::stunStatusFailure(account_id);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[23], swigjobj, jaccount_id);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::stunStatusFailure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::registrationStateChanged(std::string const &account_id, std::string const &state, int code, std::string const &detail_str) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jstring jstate = 0 ;
  jint jcode  ;
  jstring jdetail_str = 0 ;
  
  if (!swig_override[4]) {
    ConfigurationCallback::registrationStateChanged(account_id,state,code,detail_str);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    jstate = jenv->NewStringUTF((&state)->c_str());
    Swig::LocalRefGuard state_refguard(jenv, jstate); 
    jcode = (jint) code;
    jdetail_str = jenv->NewStringUTF((&detail_str)->c_str());
    Swig::LocalRefGuard detail_str_refguard(jenv, jdetail_str); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[24], swigjobj, jaccount_id, jstate, jcode, jdetail_str);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::registrationStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::volatileAccountDetailsChanged(std::string const &account_id, std::map< std::string,std::string > const &details) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jaccount_id = 0 ;
  jlong jdetails = 0 ;
  
  if (!swig_override[5]) {
    ConfigurationCallback::volatileAccountDetailsChanged(account_id,details);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jaccount_id = jenv->NewStringUTF((&account_id)->c_str());
    Swig::LocalRefGuard account_id_refguard(jenv, jaccount_id); 
    *(std::map< std::string,std::string > **)&jdetails = (std::map< std::string,std::string > *) &details; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[25], swigjobj, jaccount_id, jdetails);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::volatileAccountDetailsChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::incomingAccountMessage(std::string const &arg0, std::string const &arg1, std::map< std::string,std::string > const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jlong jarg2 = 0 ;
  
  if (!swig_override[6]) {
    ConfigurationCallback::incomingAccountMessage(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    *(std::map< std::string,std::string > **)&jarg2 = (std::map< std::string,std::string > *) &arg2; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[26], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::incomingAccountMessage ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::accountMessageStatusChanged(std::string const &arg0, uint64_t arg1, std::string const &arg2, int arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1  ;
  jstring jarg2 = 0 ;
  jint jarg3  ;
  
  if (!swig_override[7]) {
    ConfigurationCallback::accountMessageStatusChanged(arg0,arg1,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = (jlong) arg1;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = (jint) arg3;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[27], swigjobj, jarg0, jarg1, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::accountMessageStatusChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::knownDevicesChanged(std::string const &arg0, std::map< std::string,std::string > const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1 = 0 ;
  
  if (!swig_override[8]) {
    ConfigurationCallback::knownDevicesChanged(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    *(std::map< std::string,std::string > **)&jarg1 = (std::map< std::string,std::string > *) &arg1; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[28], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::knownDevicesChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::exportOnRingEnded(std::string const &arg0, int arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jarg1  ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[9]) {
    ConfigurationCallback::exportOnRingEnded(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = (jint) arg1;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[29], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::exportOnRingEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::incomingTrustRequest(std::string const &arg0, std::string const &arg1, std::vector< uint8_t > const &arg2, time_t received) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jlong jarg2 = 0 ;
  jlong jreceived  ;
  
  if (!swig_override[10]) {
    ConfigurationCallback::incomingTrustRequest(arg0,arg1,arg2,received);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    *(std::vector< uint8_t > **)&jarg2 = (std::vector< uint8_t > *) &arg2; 
    jreceived = 0;
    *((time_t **)&jreceived) = &received; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[30], swigjobj, jarg0, jarg1, jarg2, jreceived);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::incomingTrustRequest ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificatePinned(std::string const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  
  if (!swig_override[11]) {
    ConfigurationCallback::certificatePinned(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[31], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificatePinned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificatePathPinned(std::string const &arg0, std::vector< std::string > const &arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1 = 0 ;
  
  if (!swig_override[12]) {
    ConfigurationCallback::certificatePathPinned(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    *(std::vector< std::string > **)&jarg1 = (std::vector< std::string > *) &arg1; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[32], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificatePathPinned ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificateExpired(std::string const &arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  
  if (!swig_override[13]) {
    ConfigurationCallback::certificateExpired(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[33], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificateExpired ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::certificateStateChanged(std::string const &arg0, std::string const &arg1, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jstring jarg1 = 0 ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[14]) {
    ConfigurationCallback::certificateStateChanged(arg0,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jarg1 = jenv->NewStringUTF((&arg1)->c_str());
    Swig::LocalRefGuard arg1_refguard(jenv, jarg1); 
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[34], swigjobj, jarg0, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::certificateStateChanged ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::errorAlert(int alert) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jalert  ;
  
  if (!swig_override[15]) {
    ConfigurationCallback::errorAlert(alert);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jalert = (jint) alert;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[35], swigjobj, jalert);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::errorAlert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::getHardwareAudioFormat(std::vector< int32_t > *arg0) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jarg0 = 0 ;
  
  if (!swig_override[16]) {
    ConfigurationCallback::getHardwareAudioFormat(arg0);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((std::vector< int32_t > **)&jarg0) = (std::vector< int32_t > *) arg0; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[36], swigjobj, jarg0);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::getHardwareAudioFormat ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::getAppDataPath(std::string const &arg0, std::vector< std::string > *arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jlong jarg1 = 0 ;
  
  if (!swig_override[17]) {
    ConfigurationCallback::getAppDataPath(arg0,arg1);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    *((std::vector< std::string > **)&jarg1) = (std::vector< std::string > *) arg1; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[37], swigjobj, jarg0, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::getAppDataPath ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::nameRegistrationEnded(std::string const &arg0, int state, std::string const &arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jstate  ;
  jstring jarg2 = 0 ;
  
  if (!swig_override[18]) {
    ConfigurationCallback::nameRegistrationEnded(arg0,state,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jstate = (jint) state;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[38], swigjobj, jarg0, jstate, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::nameRegistrationEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::registeredNameFound(std::string const &arg0, int state, std::string const &arg2, std::string const &arg3) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0 = 0 ;
  jint jstate  ;
  jstring jarg2 = 0 ;
  jstring jarg3 = 0 ;
  
  if (!swig_override[19]) {
    ConfigurationCallback::registeredNameFound(arg0,state,arg2,arg3);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jstate = (jint) state;
    jarg2 = jenv->NewStringUTF((&arg2)->c_str());
    Swig::LocalRefGuard arg2_refguard(jenv, jarg2); 
    jarg3 = jenv->NewStringUTF((&arg3)->c_str());
    Swig::LocalRefGuard arg3_refguard(jenv, jarg3); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[39], swigjobj, jarg0, jstate, jarg2, jarg3);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ConfigurationCallback::registeredNameFound ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ConfigurationCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "volumeChanged", "(Ljava/lang/String;I)V", NULL 
    },
    {
      "accountsChanged", "()V", NULL 
    },
    {
      "historyChanged", "()V", NULL 
    },
    {
      "stunStatusFailure", "(Ljava/lang/String;)V", NULL 
    },
    {
      "registrationStateChanged", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "volatileAccountDetailsChanged", "(Ljava/lang/String;Lcx/ring/daemon/StringMap;)V", NULL 
    },
    {
      "incomingAccountMessage", "(Ljava/lang/String;Ljava/lang/String;Lcx/ring/daemon/StringMap;)V", NULL 
    },
    {
      "accountMessageStatusChanged", "(Ljava/lang/String;JLjava/lang/String;I)V", NULL 
    },
    {
      "knownDevicesChanged", "(Ljava/lang/String;Lcx/ring/daemon/StringMap;)V", NULL 
    },
    {
      "exportOnRingEnded", "(Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "incomingTrustRequest", "(Ljava/lang/String;Ljava/lang/String;Lcx/ring/daemon/Blob;Lcx/ring/daemon/SWIGTYPE_p_time_t;)V", NULL 
    },
    {
      "certificatePinned", "(Ljava/lang/String;)V", NULL 
    },
    {
      "certificatePathPinned", "(Ljava/lang/String;Lcx/ring/daemon/StringVect;)V", NULL 
    },
    {
      "certificateExpired", "(Ljava/lang/String;)V", NULL 
    },
    {
      "certificateStateChanged", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", NULL 
    },
    {
      "errorAlert", "(I)V", NULL 
    },
    {
      "getHardwareAudioFormat", "(Lcx/ring/daemon/IntVect;)V", NULL 
    },
    {
      "getAppDataPath", "(Ljava/lang/String;Lcx/ring/daemon/StringVect;)V", NULL 
    },
    {
      "nameRegistrationEnded", "(Ljava/lang/String;ILjava/lang/String;)V", NULL 
    },
    {
      "registeredNameFound", "(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("cx/ring/daemon/ConfigurationCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 20; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_VideoCallback::SwigDirector_VideoCallback(JNIEnv *jenv) : VideoCallback(), Swig::Director(jenv) {
}

SwigDirector_VideoCallback::~SwigDirector_VideoCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_VideoCallback::getCameraInfo(std::string const &device, std::vector< int > *formats, std::vector< unsigned int > *sizes, std::vector< unsigned int > *rates) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jdevice = 0 ;
  jlong jformats = 0 ;
  jlong jsizes = 0 ;
  jlong jrates = 0 ;
  
  if (!swig_override[0]) {
    VideoCallback::getCameraInfo(device,formats,sizes,rates);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdevice = jenv->NewStringUTF((&device)->c_str());
    Swig::LocalRefGuard device_refguard(jenv, jdevice); 
    *((std::vector< int > **)&jformats) = (std::vector< int > *) formats; 
    *((std::vector< unsigned int > **)&jsizes) = (std::vector< unsigned int > *) sizes; 
    *((std::vector< unsigned int > **)&jrates) = (std::vector< unsigned int > *) rates; 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[40], swigjobj, jdevice, jformats, jsizes, jrates);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::getCameraInfo ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::setParameters(std::string const arg0, int const format, int const width, int const height, int const rate) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jarg0  ;
  jint jformat  ;
  jint jwidth  ;
  jint jheight  ;
  jint jrate  ;
  
  if (!swig_override[1]) {
    VideoCallback::setParameters(arg0,format,width,height,rate);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg0 = jenv->NewStringUTF((&arg0)->c_str());
    Swig::LocalRefGuard arg0_refguard(jenv, jarg0); 
    jformat = (jint) format;
    jwidth = (jint) width;
    jheight = (jint) height;
    jrate = (jint) rate;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[41], swigjobj, jarg0, jformat, jwidth, jheight, jrate);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::setParameters ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::startCapture(std::string const &camid) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jcamid = 0 ;
  
  if (!swig_override[2]) {
    VideoCallback::startCapture(camid);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jcamid = jenv->NewStringUTF((&camid)->c_str());
    Swig::LocalRefGuard camid_refguard(jenv, jcamid); 
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[42], swigjobj, jcamid);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::startCapture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::stopCapture() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    VideoCallback::stopCapture();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[43], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::stopCapture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::decodingStarted(std::string const &id, std::string const &shm_path, int w, int h, bool is_mixer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jshm_path = 0 ;
  jint jw  ;
  jint jh  ;
  jboolean jis_mixer  ;
  
  if (!swig_override[4]) {
    VideoCallback::decodingStarted(id,shm_path,w,h,is_mixer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jshm_path = jenv->NewStringUTF((&shm_path)->c_str());
    Swig::LocalRefGuard shm_path_refguard(jenv, jshm_path); 
    jw = (jint) w;
    jh = (jint) h;
    jis_mixer = (jboolean) is_mixer;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[44], swigjobj, jid, jshm_path, jw, jh, jis_mixer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::decodingStarted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::decodingStopped(std::string const &id, std::string const &shm_path, bool is_mixer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jid = 0 ;
  jstring jshm_path = 0 ;
  jboolean jis_mixer  ;
  
  if (!swig_override[5]) {
    VideoCallback::decodingStopped(id,shm_path,is_mixer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jid = jenv->NewStringUTF((&id)->c_str());
    Swig::LocalRefGuard id_refguard(jenv, jid); 
    jshm_path = jenv->NewStringUTF((&shm_path)->c_str());
    Swig::LocalRefGuard shm_path_refguard(jenv, jshm_path); 
    jis_mixer = (jboolean) is_mixer;
    jenv->CallStaticVoidMethod(Swig::jclass_RingserviceJNI, Swig::director_method_ids[45], swigjobj, jid, jshm_path, jis_mixer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in VideoCallback::decodingStopped ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_VideoCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getCameraInfo", "(Ljava/lang/String;Lcx/ring/daemon/IntVect;Lcx/ring/daemon/UintVect;Lcx/ring/daemon/UintVect;)V", NULL 
    },
    {
      "setParameters", "(Ljava/lang/String;IIII)V", NULL 
    },
    {
      "startCapture", "(Ljava/lang/String;)V", NULL 
    },
    {
      "stopCapture", "()V", NULL 
    },
    {
      "decodingStarted", "(Ljava/lang/String;Ljava/lang/String;IIZ)V", NULL 
    },
    {
      "decodingStopped", "(Ljava/lang/String;Ljava/lang/String;Z)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("cx/ring/daemon/VideoCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 6; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1StringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1StringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1keys(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__keys((std::map< std::string,std::string > const *)arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1setRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  std::vector< uint8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  std_map_Sl_std_string_Sc_std_string_Sg__setRaw(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_StringMap_1getRaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string arg2 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = std_map_Sl_std_string_Sc_std_string_Sg__getRaw(arg1,arg2);
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1StringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1StringVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1StringVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  std::vector< std::string >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    result = std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_vector_Sl_std_string_Sg__add(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_StringVect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (int32_t)std_vector_Sl_std_string_Sg__size((std::vector< std::string > const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1StringVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1VectMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >();
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1VectMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > >::size_type arg1 ;
  std::vector< std::map< std::string,std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::map< std::string,std::string > >::size_type)jarg1; 
  result = (std::vector< std::map< std::string,std::string > > *)new std::vector< std::map< std::string,std::string > >(arg1);
  *(std::vector< std::map< std::string,std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::map< std::string,std::string > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = ((std::vector< std::map< std::string,std::string > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (std::vector< std::map< std::string,std::string > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  result = (bool)((std::vector< std::map< std::string,std::string > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::map< std::string,std::string > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::map< std::string,std::string > >::value_type *) &std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::map< std::string,std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VectMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::map< std::string,std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::map< std::string,std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::map< std::string,std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1VectMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::map< std::string,std::string > > *arg1 = (std::vector< std::map< std::string,std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::map< std::string,std::string > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1IntegerMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,int > *)new std::map< std::string,int >();
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1IntegerMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = 0 ;
  std::map< std::string,int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,int > *)new std::map< std::string,int >((std::map< std::string,int > const &)*arg1);
  *(std::map< std::string,int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (unsigned int)((std::map< std::string,int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  result = (bool)((std::map< std::string,int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = (int *) &std_map_Sl_std_string_Sc_int_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_std_string_Sc_int_Sg__set(arg1,(std::string const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_int_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_int_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1IntegerMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,int > *arg1 = (std::map< std::string,int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1IntVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int32_t > *)new std::vector< int32_t >();
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1IntVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int32_t > *)new std::vector< int32_t >(arg1);
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = (bool)((std::vector< int32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int32_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_IntVect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int32_t_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1IntVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1UintVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1UintVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned int >::size_type)jarg1; 
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >(arg1);
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_UintVect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__set(arg1,arg2,(unsigned int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1UintVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1Blob_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >();
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1Blob_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< uint8_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned char >::size_type)jarg1; 
  result = (std::vector< uint8_t > *)new std::vector< uint8_t >(arg1);
  *(std::vector< uint8_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = ((std::vector< uint8_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  result = (bool)((std::vector< uint8_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  std::vector< unsigned char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  temp2 = (std::vector< unsigned char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_uint8_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Blob_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  std::vector< unsigned char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint8_t_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1Blob(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint8_t > *arg1 = (std::vector< uint8_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint8_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1FloatVect_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1FloatVect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_FloatVect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1FloatVect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_fini(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::fini();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_pollEvents(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::pollEvents();
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_placeCall(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::placeCall((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_refuse(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::refuse((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_accept(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::accept((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_hangUp(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::hangUp((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_hold(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::hold((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_unhold(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unhold((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_muteLocalMedia(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  result = (bool)DRing::muteLocalMedia((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_transfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::transfer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_attendedTransfer(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::attendedTransfer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCallDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCallDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCallList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCallList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_removeConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::removeConference((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_joinParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::joinParticipant((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_createConfFromParticipantList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  DRing::createConfFromParticipantList((std::vector< std::string > const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_isConferenceParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::isConferenceParticipant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_addParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::addParticipant((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_addMainParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::addMainParticipant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_detachParticipant(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::detachParticipant((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_joinConference(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::joinConference((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_hangUpConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::hangUpConference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_holdConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::holdConference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_unholdConference(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unholdConference((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getConferenceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getConferenceList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getParticipantList(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getParticipantList((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getDisplayNames(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getDisplayNames((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getConferenceId(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConferenceId((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getConferenceDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getConferenceDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_startRecordedFilePlayback(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::startRecordedFilePlayback((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_stopRecordedFilePlayback(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::stopRecordedFilePlayback((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_toggleRecording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::toggleRecording((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setRecording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setRecording((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_recordPlaybackSeek(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  double arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  DRing::recordPlaybackSeek(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_getIsRecording(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::getIsRecording((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getCurrentAudioCodecName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCurrentAudioCodecName((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_playDTMF(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::playDTMF((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_startTone(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  int32_t arg1 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  DRing::startTone(arg1,arg2);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_switchInput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::switchInput((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_sendTextMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jboolean jarg4) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool temp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  temp4 = jarg4 ? true : false; 
  arg4 = &temp4; 
  DRing::sendTextMessage((std::string const &)*arg1,(std::map< std::string,std::string > const &)*arg2,(std::string const &)*arg3,(bool const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Callback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1callStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->callStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1callStateChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->Callback::callStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1transferFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->transferFailed();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1transferFailedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->Callback::transferFailed();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1transferSucceeded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->transferSucceeded();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1transferSucceededSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  (arg1)->Callback::transferSucceeded();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->recordPlaybackStopped((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackStoppedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::recordPlaybackStopped((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1voiceMailNotify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->voiceMailNotify((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1voiceMailNotifySwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::voiceMailNotify((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::map< std::string,std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->incomingMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingMessageSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::map< std::string,std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->Callback::incomingMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->incomingCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::incomingCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackFilepath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->recordPlaybackFilepath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackFilepathSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::recordPlaybackFilepath((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->conferenceCreated((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceCreatedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::conferenceCreated((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->conferenceChanged((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->Callback::conferenceChanged((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->conferenceRemoved((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemovedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::conferenceRemoved((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1newCallCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->newCallCreated((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1newCallCreatedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::newCallCreated((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1updatePlaybackScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->updatePlaybackScale((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1updatePlaybackScaleSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Callback::updatePlaybackScale((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->conferenceRemove((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemoveSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->Callback::conferenceRemove((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1newCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->newCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1newCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->Callback::newCall((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1sipCallStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->sipCallStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1sipCallStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  (arg1)->Callback::sipCallStateChange((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordingStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->recordingStateChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordingStateChangedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::recordingStateChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordStateChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->recordStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1recordStateChangeSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->Callback::recordStateChange((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1onRtcpReportReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return ;
  } 
  (arg1)->onRtcpReportReceived((std::string const &)*arg2,(std::map< std::string,int > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1onRtcpReportReceivedSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,int > const & reference is null");
    return ;
  } 
  (arg1)->Callback::onRtcpReportReceived((std::string const &)*arg2,(std::map< std::string,int > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1peerHold(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->peerHold((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1peerHoldSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Callback *arg1 = (Callback *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Callback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  (arg1)->Callback::peerHold((std::string const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1Callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Callback *)new SwigDirector_Callback(jenv);
  *(Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Callback *obj = *((Callback **)&objarg);
  (void)jcls;
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_Callback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Callback *obj = *((Callback **)&objarg);
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAccountDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getAccountDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getVolatileAccountDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getVolatileAccountDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAccountDetails(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  DRing::setAccountDetails((std::string const &)*arg1,(std::map< std::string,std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAccountActive(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::setAccountActive((std::string const &)*arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAccountTemplate(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getAccountTemplate((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_addAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = DRing::addAccount((std::map< std::string,std::string > const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_removeAccount(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::removeAccount((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAccountList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAccountList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_sendRegister(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  std::string *arg1 = 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  DRing::sendRegister((std::string const &)*arg1,arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_registerAllAccounts(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::registerAllAccounts();
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_sendAccountTextMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (uint64_t)DRing::sendAccountTextMessage((std::string const &)*arg1,(std::string const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_getMessageStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  uint64_t arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint64_t)jarg1; 
  result = (int)DRing::getMessageStatus(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_lookupName(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::lookupName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_lookupAddress(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::lookupAddress((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_registerName(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::registerName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getTlsDefaultSettings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getTlsDefaultSettings();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCodecList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCodecList();
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getSupportedTlsMethod(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getSupportedTlsMethod();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getSupportedCiphers(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getSupportedCiphers((std::string const &)*arg1);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCodecDetails(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = DRing::getCodecDetails((std::string const &)*arg1,(unsigned int const &)*arg2);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_setCodecDetails(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(std::map< std::string,std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (bool)DRing::setCodecDetails((std::string const &)*arg1,(unsigned int const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getActiveCodecList(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< unsigned int > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getActiveCodecList((std::string const &)*arg1);
  *(std::vector< unsigned int > **)&jresult = new std::vector< unsigned int >((const std::vector< unsigned int > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_exportOnRing(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::exportOnRing((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getKnownRingDevices(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getKnownRingDevices((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setActiveCodecList(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< unsigned int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< unsigned int > const & reference is null");
    return ;
  } 
  DRing::setActiveCodecList((std::string const &)*arg1,(std::vector< unsigned int > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAudioPluginList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioPluginList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAudioPlugin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setAudioPlugin((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAudioOutputDeviceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioOutputDeviceList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAudioOutputDevice(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setAudioOutputDevice(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAudioInputDevice(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setAudioInputDevice(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAudioRingtoneDevice(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setAudioRingtoneDevice(arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAudioInputDeviceList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioInputDeviceList();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCurrentAudioDevicesIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCurrentAudioDevicesIndex();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_getAudioInputDeviceIndex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int32_t)DRing::getAudioInputDeviceIndex((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_getAudioOutputDeviceIndex(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int32_t)DRing::getAudioOutputDeviceIndex((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getCurrentAudioOutputPlugin(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getCurrentAudioOutputPlugin();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_getNoiseSuppressState(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getNoiseSuppressState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setNoiseSuppressState(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setNoiseSuppressState(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_isAgcEnabled(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isAgcEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAgcState(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setAgcState(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_muteDtmf(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::muteDtmf(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_isDtmfMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isDtmfMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_isCaptureMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isCaptureMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_muteCapture(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::muteCapture(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_isPlaybackMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isPlaybackMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_mutePlayback(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::mutePlayback(arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_isRingtoneMuted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::isRingtoneMuted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_muteRingtone(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::muteRingtone(arg1);
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getAudioManager(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAudioManager();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_setAudioManager(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::setAudioManager((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getRecordPath(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getRecordPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setRecordPath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setRecordPath((std::string const &)*arg1);
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_getIsAlwaysRecording(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::getIsAlwaysRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setIsAlwaysRecording(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  bool arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  DRing::setIsAlwaysRecording(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setHistoryLimit(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  DRing::setHistoryLimit(arg1);
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_getHistoryLimit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)DRing::getHistoryLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setAccountsOrder(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setAccountsOrder((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getHookSettings(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getHookSettings();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setHookSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  DRing::setHookSettings((std::map< std::string,std::string > const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCredentials(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string > > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCredentials((std::string const &)*arg1);
  *(std::vector< std::map< std::string,std::string > > **)&jresult = new std::vector< std::map< std::string,std::string > >((const std::vector< std::map< std::string,std::string > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setCredentials(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::vector< std::map< std::string,std::string > > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< std::map< std::string,std::string > > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::map< std::string,std::string > > const & reference is null");
    return ;
  } 
  DRing::setCredentials((std::string const &)*arg1,(std::vector< std::map< std::string,std::string > > const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getAddrFromInterfaceName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getAddrFromInterfaceName((std::string const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAllIpInterface(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAllIpInterface();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getAllIpInterfaceByName(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getAllIpInterfaceByName();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getShortcuts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getShortcuts();
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setShortcuts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  DRing::setShortcuts((std::map< std::string,std::string > const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setVolume(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2) {
  std::string *arg1 = 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  DRing::setVolume((std::string const &)*arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_cx_ring_daemon_RingserviceJNI_getVolume(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (double)DRing::getVolume((std::string const &)*arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_validateCertificatePath(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = DRing::validateCertificatePath((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_validateCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::validateCertificate((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCertificateDetails(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getCertificateDetails((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCertificateDetailsPath(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = DRing::getCertificateDetailsPath((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getPinnedCertificates(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getPinnedCertificates();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_pinCertificate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  std::vector< uint8_t > *arg1 = 0 ;
  bool arg2 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint8_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = DRing::pinCertificate((std::vector< unsigned char > const &)*arg1,arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_unpinCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::unpinCertificate((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_pinCertificatePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::pinCertificatePath((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_unpinCertificatePath(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (unsigned int)DRing::unpinCertificatePath((std::string const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_pinRemoteCertificate(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::pinRemoteCertificate((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_setCertificateStatus(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)DRing::setCertificateStatus((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getCertificatesByStatus(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = DRing::getCertificatesByStatus((std::string const &)*arg1,(std::string const &)*arg2);
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getTrustRequests(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getTrustRequests((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_acceptTrustRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::acceptTrustRequest((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_discardTrustRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)DRing::discardTrustRequest((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_sendTrustRequest(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< uint8_t > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  DRing::sendTrustRequest((std::string const &)*arg1,(std::string const &)*arg2,(std::vector< unsigned char > const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_exportAccounts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  std::vector< std::string > arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< std::string > *argp1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::vector< std::string > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::string >");
    return 0;
  }
  arg1 = *argp1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (int)DRing::exportAccounts(arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_cx_ring_daemon_RingserviceJNI_importAccounts(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jint jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)DRing::importAccounts(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_connectivityChanged(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::connectivityChanged();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1ConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volumeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->volumeChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volumeChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  (arg1)->ConfigurationCallback::volumeChanged((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->accountsChanged();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountsChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->ConfigurationCallback::accountsChanged();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1historyChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->historyChanged();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1historyChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  (arg1)->ConfigurationCallback::historyChanged();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1stunStatusFailure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->stunStatusFailure((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1stunStatusFailureSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::stunStatusFailure((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registrationStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->registrationStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registrationStateChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->ConfigurationCallback::registrationStateChanged((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volatileAccountDetailsChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->volatileAccountDetailsChanged((std::string const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volatileAccountDetailsChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::volatileAccountDetailsChanged((std::string const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingAccountMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::map< std::string,std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->incomingAccountMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingAccountMessageSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::map< std::string,std::string > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::map< std::string,std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::incomingAccountMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::map< std::string,std::string > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountMessageStatusChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->accountMessageStatusChanged((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountMessageStatusChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4, jint jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint64_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->ConfigurationCallback::accountMessageStatusChanged((std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1knownDevicesChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->knownDevicesChanged((std::string const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1knownDevicesChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::map< std::string,std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::knownDevicesChanged((std::string const &)*arg2,(std::map< std::string,std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1exportOnRingEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->exportOnRingEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1exportOnRingEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::exportOnRingEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingTrustRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< uint8_t > *arg4 = 0 ;
  time_t arg5 ;
  time_t *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector< uint8_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  argp5 = *(time_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->incomingTrustRequest((std::string const &)*arg2,(std::string const &)*arg3,(std::vector< uint8_t > const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingTrustRequestSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< uint8_t > *arg4 = 0 ;
  time_t arg5 ;
  time_t *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector< uint8_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t > const & reference is null");
    return ;
  } 
  argp5 = *(time_t **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null time_t");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->ConfigurationCallback::incomingTrustRequest((std::string const &)*arg2,(std::string const &)*arg3,(std::vector< uint8_t > const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePinned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->certificatePinned((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePinnedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::certificatePinned((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePathPinned(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->certificatePathPinned((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePathPinnedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->ConfigurationCallback::certificatePathPinned((std::string const &)*arg2,(std::vector< std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateExpired(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->certificateExpired((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateExpiredSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ConfigurationCallback::certificateExpired((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->certificateStateChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateStateChangedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::certificateStateChanged((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1errorAlert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->errorAlert(arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1errorAlertSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ConfigurationCallback::errorAlert(arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getHardwareAudioFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(std::vector< int32_t > **)&jarg2; 
  (arg1)->getHardwareAudioFormat(arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getHardwareAudioFormatSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(std::vector< int32_t > **)&jarg2; 
  (arg1)->ConfigurationCallback::getHardwareAudioFormat(arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getAppDataPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  (arg1)->getAppDataPath((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getAppDataPathSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  (arg1)->ConfigurationCallback::getAppDataPath((std::string const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1nameRegistrationEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->nameRegistrationEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1nameRegistrationEndedSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ConfigurationCallback::nameRegistrationEnded((std::string const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registeredNameFound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->registeredNameFound((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registeredNameFoundSwigExplicitConfigurationCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jstring jarg5) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->ConfigurationCallback::registeredNameFound((std::string const &)*arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1ConfigurationCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ConfigurationCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ConfigurationCallback *)new SwigDirector_ConfigurationCallback(jenv);
  *(ConfigurationCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ConfigurationCallback *obj = *((ConfigurationCallback **)&objarg);
  (void)jcls;
  SwigDirector_ConfigurationCallback *director = dynamic_cast<SwigDirector_ConfigurationCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ConfigurationCallback *obj = *((ConfigurationCallback **)&objarg);
  SwigDirector_ConfigurationCallback *director = dynamic_cast<SwigDirector_ConfigurationCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_setDefaultDevice(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::setDefaultDevice((std::string const &)*arg1);
}


SWIGEXPORT jstring JNICALL Java_cx_ring_daemon_RingserviceJNI_getDefaultDevice(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  result = DRing::getDefaultDevice();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_startCamera(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::startCamera();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_stopCamera(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  DRing::stopCamera();
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_hasCameraStarted(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::hasCameraStarted();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_switchInput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)DRing::switchInput((std::string const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_cx_ring_daemon_RingserviceJNI_switchToCamera(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)DRing::switchToCamera();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_getSettings(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = DRing::getSettings((std::string const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = new std::map< std::string,std::string >((const std::map< std::string,std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_applySettings(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string *arg1 = 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< std::string,std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return ;
  } 
  DRing::applySettings((std::string const &)*arg1,(std::map< std::string,std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_addVideoDevice(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::addVideoDevice((std::string const &)*arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_removeVideoDevice(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  DRing::removeVideoDevice((std::string const &)*arg1);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_obtainFrame(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (uint8_t *)DRing::obtainFrame(arg1);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_releaseFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  DRing::releaseFrame(arg1);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_registerSinkTarget(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  std::string *arg1 = 0 ;
  DRing::SinkTarget *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(DRing::SinkTarget **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DRing::SinkTarget const & reference is null");
    return ;
  } 
  DRing::registerSinkTarget((std::string const &)*arg1,(DRing::SinkTarget const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_delete_1VideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VideoCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1getCameraInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = (std::vector< int > *) 0 ;
  std::vector< unsigned int > *arg4 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg5 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< int > **)&jarg3; 
  arg4 = *(std::vector< unsigned int > **)&jarg4; 
  arg5 = *(std::vector< unsigned int > **)&jarg5; 
  (arg1)->getCameraInfo((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1getCameraInfoSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< int > *arg3 = (std::vector< int > *) 0 ;
  std::vector< unsigned int > *arg4 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg5 = (std::vector< unsigned int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< int > **)&jarg3; 
  arg4 = *(std::vector< unsigned int > **)&jarg4; 
  arg5 = *(std::vector< unsigned int > **)&jarg5; 
  (arg1)->VideoCallback::getCameraInfo((std::string const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1setParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1setParametersSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->VideoCallback::setParameters(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1startCapture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->startCapture((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1startCaptureSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->VideoCallback::startCapture((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1stopCapture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  (arg1)->stopCapture();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1stopCaptureSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  (arg1)->VideoCallback::stopCapture();
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->decodingStarted((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStartedSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jint jarg5, jboolean jarg6) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->VideoCallback::decodingStarted((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStopped(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->decodingStopped((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStoppedSwigExplicitVideoCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  VideoCallback *arg1 = (VideoCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VideoCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  (arg1)->VideoCallback::decodingStopped((std::string const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_cx_ring_daemon_RingserviceJNI_new_1VideoCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VideoCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VideoCallback *)new SwigDirector_VideoCallback(jenv);
  *(VideoCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  VideoCallback *obj = *((VideoCallback **)&objarg);
  (void)jcls;
  SwigDirector_VideoCallback *director = dynamic_cast<SwigDirector_VideoCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  VideoCallback *obj = *((VideoCallback **)&objarg);
  SwigDirector_VideoCallback *director = dynamic_cast<SwigDirector_VideoCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  ConfigurationCallback *arg1 = (ConfigurationCallback *) 0 ;
  Callback *arg2 = (Callback *) 0 ;
  VideoCallback *arg3 = (VideoCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(ConfigurationCallback **)&jarg1; 
  arg2 = *(Callback **)&jarg2; 
  arg3 = *(VideoCallback **)&jarg3; 
  init(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_cx_ring_daemon_RingserviceJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[46] = {
    {
      "SwigDirector_Callback_callStateChanged", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_transferFailed", "(Lcx/ring/daemon/Callback;)V" 
    },
    {
      "SwigDirector_Callback_transferSucceeded", "(Lcx/ring/daemon/Callback;)V" 
    },
    {
      "SwigDirector_Callback_recordPlaybackStopped", "(Lcx/ring/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_voiceMailNotify", "(Lcx/ring/daemon/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_incomingMessage", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_Callback_incomingCall", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_recordPlaybackFilepath", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_conferenceCreated", "(Lcx/ring/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_conferenceChanged", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_conferenceRemoved", "(Lcx/ring/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_newCallCreated", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_updatePlaybackScale", "(Lcx/ring/daemon/Callback;Ljava/lang/String;II)V" 
    },
    {
      "SwigDirector_Callback_conferenceRemove", "(Lcx/ring/daemon/Callback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_newCall", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_Callback_sipCallStateChange", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_recordingStateChanged", "(Lcx/ring/daemon/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_recordStateChange", "(Lcx/ring/daemon/Callback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_Callback_onRtcpReportReceived", "(Lcx/ring/daemon/Callback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_Callback_peerHold", "(Lcx/ring/daemon/Callback;Ljava/lang/String;Z)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_volumeChanged", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_accountsChanged", "(Lcx/ring/daemon/ConfigurationCallback;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_historyChanged", "(Lcx/ring/daemon/ConfigurationCallback;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_stunStatusFailure", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_registrationStateChanged", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_volatileAccountDetailsChanged", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_incomingAccountMessage", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_accountMessageStatusChanged", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLjava/lang/String;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_knownDevicesChanged", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_exportOnRingEnded", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_incomingTrustRequest", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;JJ)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificatePinned", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificatePathPinned", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificateExpired", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_certificateStateChanged", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_errorAlert", "(Lcx/ring/daemon/ConfigurationCallback;I)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_getHardwareAudioFormat", "(Lcx/ring/daemon/ConfigurationCallback;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_getAppDataPath", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_nameRegistrationEnded", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ConfigurationCallback_registeredNameFound", "(Lcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_VideoCallback_getCameraInfo", "(Lcx/ring/daemon/VideoCallback;Ljava/lang/String;JJJ)V" 
    },
    {
      "SwigDirector_VideoCallback_setParameters", "(Lcx/ring/daemon/VideoCallback;Ljava/lang/String;IIII)V" 
    },
    {
      "SwigDirector_VideoCallback_startCapture", "(Lcx/ring/daemon/VideoCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_VideoCallback_stopCapture", "(Lcx/ring/daemon/VideoCallback;)V" 
    },
    {
      "SwigDirector_VideoCallback_decodingStarted", "(Lcx/ring/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;IIZ)V" 
    },
    {
      "SwigDirector_VideoCallback_decodingStopped", "(Lcx/ring/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;Z)V" 
    }
  };
  Swig::jclass_RingserviceJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_RingserviceJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

#include "logger.h"

JavaVM *gJavaVM;
const char *kringservicePath = "cx/ring/daemon/RingserviceJNI";

void deinitClassHelper(JNIEnv *env, jobject obj) {
	RING_INFO("deinitClassHelper");

	/* delete cached object instances */
    env->DeleteGlobalRef(obj);
	RING_INFO("deinitClassHelper: object %x deleted", obj);
}

JNIEXPORT jint JNI_OnLoad(JavaVM *vm, void *reserved) {
	JNIEnv *env;
	jclass clazz;
	jint r;

    RING_INFO("JNI_OnLoad");

	//Assume it is c++
	r = vm->GetEnv ((void **) &env, JNI_VERSION_1_6);
    if (r != JNI_OK) {
		RING_ERR("JNI_OnLoad: failed to get the environment using GetEnv()");
        return -1;
    }
	RING_INFO("JNI_Onload: GetEnv %p", env);

	clazz = env->FindClass (kringservicePath);
	if (!clazz) {
        RING_ERR("JNI_Onload: whoops, %s class not found!", kringservicePath);
	}
	gJavaVM = vm;
	RING_INFO("JNI_Onload: JavaVM %p", gJavaVM);

	/* put instances of class object we need into cache */
    //initClassHelper(env, kManagerPath, &gManagerObject);

	JNINativeMethod methods[] = {

	{"new_StringMap__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1StringMap_1_1SWIG_10},
{"new_StringMap__SWIG_1", "(JLcx/ring/daemon/StringMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1StringMap_1_1SWIG_11},
{"StringMap_size", "(JLcx/ring/daemon/StringMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1size},
{"StringMap_empty", "(JLcx/ring/daemon/StringMap;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1empty},
{"StringMap_clear", "(JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1clear},
{"StringMap_get", "(JLcx/ring/daemon/StringMap;Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1get},
{"StringMap_set", "(JLcx/ring/daemon/StringMap;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1set},
{"StringMap_del", "(JLcx/ring/daemon/StringMap;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1del},
{"StringMap_has_key", "(JLcx/ring/daemon/StringMap;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1has_1key},
{"StringMap_keys", "(JLcx/ring/daemon/StringMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1keys},
{"StringMap_setRaw", "(JLcx/ring/daemon/StringMap;Ljava/lang/String;JLcx/ring/daemon/Blob;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1setRaw},
{"StringMap_getRaw", "(JLcx/ring/daemon/StringMap;Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringMap_1getRaw},
{"delete_StringMap", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1StringMap},
{"new_StringVect__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1StringVect_1_1SWIG_10},
{"new_StringVect__SWIG_1", "(J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1StringVect_1_1SWIG_11},
{"StringVect_capacity", "(JLcx/ring/daemon/StringVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1capacity},
{"StringVect_reserve", "(JLcx/ring/daemon/StringVect;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1reserve},
{"StringVect_isEmpty", "(JLcx/ring/daemon/StringVect;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1isEmpty},
{"StringVect_clear", "(JLcx/ring/daemon/StringVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1clear},
{"StringVect_get", "(JLcx/ring/daemon/StringVect;I)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1get},
{"StringVect_set", "(JLcx/ring/daemon/StringVect;ILjava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1set},
{"StringVect_add", "(JLcx/ring/daemon/StringVect;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1add},
{"StringVect_size", "(JLcx/ring/daemon/StringVect;)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_StringVect_1size},
{"delete_StringVect", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1StringVect},
{"new_VectMap__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1VectMap_1_1SWIG_10},
{"new_VectMap__SWIG_1", "(J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1VectMap_1_1SWIG_11},
{"VectMap_size", "(JLcx/ring/daemon/VectMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1size},
{"VectMap_capacity", "(JLcx/ring/daemon/VectMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1capacity},
{"VectMap_reserve", "(JLcx/ring/daemon/VectMap;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1reserve},
{"VectMap_isEmpty", "(JLcx/ring/daemon/VectMap;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1isEmpty},
{"VectMap_clear", "(JLcx/ring/daemon/VectMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1clear},
{"VectMap_add", "(JLcx/ring/daemon/VectMap;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1add},
{"VectMap_get", "(JLcx/ring/daemon/VectMap;I)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1get},
{"VectMap_set", "(JLcx/ring/daemon/VectMap;IJLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VectMap_1set},
{"delete_VectMap", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1VectMap},
{"new_IntegerMap__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1IntegerMap_1_1SWIG_10},
{"new_IntegerMap__SWIG_1", "(JLcx/ring/daemon/IntegerMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1IntegerMap_1_1SWIG_11},
{"IntegerMap_size", "(JLcx/ring/daemon/IntegerMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1size},
{"IntegerMap_empty", "(JLcx/ring/daemon/IntegerMap;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1empty},
{"IntegerMap_clear", "(JLcx/ring/daemon/IntegerMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1clear},
{"IntegerMap_get", "(JLcx/ring/daemon/IntegerMap;Ljava/lang/String;)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1get},
{"IntegerMap_set", "(JLcx/ring/daemon/IntegerMap;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1set},
{"IntegerMap_del", "(JLcx/ring/daemon/IntegerMap;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1del},
{"IntegerMap_has_key", "(JLcx/ring/daemon/IntegerMap;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntegerMap_1has_1key},
{"delete_IntegerMap", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1IntegerMap},
{"new_IntVect__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1IntVect_1_1SWIG_10},
{"new_IntVect__SWIG_1", "(J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1IntVect_1_1SWIG_11},
{"IntVect_size", "(JLcx/ring/daemon/IntVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1size},
{"IntVect_capacity", "(JLcx/ring/daemon/IntVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1capacity},
{"IntVect_reserve", "(JLcx/ring/daemon/IntVect;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1reserve},
{"IntVect_isEmpty", "(JLcx/ring/daemon/IntVect;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1isEmpty},
{"IntVect_clear", "(JLcx/ring/daemon/IntVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1clear},
{"IntVect_add", "(JLcx/ring/daemon/IntVect;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1add},
{"IntVect_get", "(JLcx/ring/daemon/IntVect;I)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1get},
{"IntVect_set", "(JLcx/ring/daemon/IntVect;II)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_IntVect_1set},
{"delete_IntVect", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1IntVect},
{"new_UintVect__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1UintVect_1_1SWIG_10},
{"new_UintVect__SWIG_1", "(J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1UintVect_1_1SWIG_11},
{"UintVect_size", "(JLcx/ring/daemon/UintVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1size},
{"UintVect_capacity", "(JLcx/ring/daemon/UintVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1capacity},
{"UintVect_reserve", "(JLcx/ring/daemon/UintVect;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1reserve},
{"UintVect_isEmpty", "(JLcx/ring/daemon/UintVect;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1isEmpty},
{"UintVect_clear", "(JLcx/ring/daemon/UintVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1clear},
{"UintVect_add", "(JLcx/ring/daemon/UintVect;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1add},
{"UintVect_get", "(JLcx/ring/daemon/UintVect;I)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1get},
{"UintVect_set", "(JLcx/ring/daemon/UintVect;IJ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_UintVect_1set},
{"delete_UintVect", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1UintVect},
{"new_Blob__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1Blob_1_1SWIG_10},
{"new_Blob__SWIG_1", "(J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1Blob_1_1SWIG_11},
{"Blob_size", "(JLcx/ring/daemon/Blob;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1size},
{"Blob_capacity", "(JLcx/ring/daemon/Blob;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1capacity},
{"Blob_reserve", "(JLcx/ring/daemon/Blob;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1reserve},
{"Blob_isEmpty", "(JLcx/ring/daemon/Blob;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1isEmpty},
{"Blob_clear", "(JLcx/ring/daemon/Blob;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1clear},
{"Blob_add", "(JLcx/ring/daemon/Blob;S)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1add},
{"Blob_get", "(JLcx/ring/daemon/Blob;I)S", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1get},
{"Blob_set", "(JLcx/ring/daemon/Blob;IS)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Blob_1set},
{"delete_Blob", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1Blob},
{"new_FloatVect__SWIG_0", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1FloatVect_1_1SWIG_10},
{"new_FloatVect__SWIG_1", "(J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1FloatVect_1_1SWIG_11},
{"FloatVect_size", "(JLcx/ring/daemon/FloatVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1size},
{"FloatVect_capacity", "(JLcx/ring/daemon/FloatVect;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1capacity},
{"FloatVect_reserve", "(JLcx/ring/daemon/FloatVect;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1reserve},
{"FloatVect_isEmpty", "(JLcx/ring/daemon/FloatVect;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1isEmpty},
{"FloatVect_clear", "(JLcx/ring/daemon/FloatVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1clear},
{"FloatVect_add", "(JLcx/ring/daemon/FloatVect;F)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1add},
{"FloatVect_get", "(JLcx/ring/daemon/FloatVect;I)F", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1get},
{"FloatVect_set", "(JLcx/ring/daemon/FloatVect;IF)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_FloatVect_1set},
{"delete_FloatVect", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1FloatVect},
{"fini", "()V", (void*)& Java_cx_ring_daemon_RingserviceJNI_fini},
{"pollEvents", "()V", (void*)& Java_cx_ring_daemon_RingserviceJNI_pollEvents},
{"placeCall", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_placeCall},
{"refuse", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_refuse},
{"accept", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_accept},
{"hangUp", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_hangUp},
{"hold", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_hold},
{"unhold", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_unhold},
{"muteLocalMedia", "(Ljava/lang/String;Ljava/lang/String;Z)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_muteLocalMedia},
{"transfer", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_transfer},
{"attendedTransfer", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_attendedTransfer},
{"getCallDetails", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCallDetails},
{"getCallList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCallList},
{"removeConference", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_removeConference},
{"joinParticipant", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_joinParticipant},
{"createConfFromParticipantList", "(JLcx/ring/daemon/StringVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_createConfFromParticipantList},
{"isConferenceParticipant", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_isConferenceParticipant},
{"addParticipant", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_addParticipant},
{"addMainParticipant", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_addMainParticipant},
{"detachParticipant", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_detachParticipant},
{"joinConference", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_joinConference},
{"hangUpConference", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_hangUpConference},
{"holdConference", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_holdConference},
{"unholdConference", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_unholdConference},
{"getConferenceList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getConferenceList},
{"getParticipantList", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getParticipantList},
{"getDisplayNames", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getDisplayNames},
{"getConferenceId", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getConferenceId},
{"getConferenceDetails", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getConferenceDetails},
{"startRecordedFilePlayback", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_startRecordedFilePlayback},
{"stopRecordedFilePlayback", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_stopRecordedFilePlayback},
{"toggleRecording", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_toggleRecording},
{"setRecording", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setRecording},
{"recordPlaybackSeek", "(D)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_recordPlaybackSeek},
{"getIsRecording", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_getIsRecording},
{"getCurrentAudioCodecName", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCurrentAudioCodecName},
{"playDTMF", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_playDTMF},
{"startTone", "(II)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_startTone},
{"switchInput__SWIG_0", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_switchInput_1_1SWIG_10},
{"sendTextMessage", "(Ljava/lang/String;JLcx/ring/daemon/StringMap;Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_sendTextMessage},
{"delete_Callback", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1Callback},
{"Callback_callStateChanged", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1callStateChanged},
{"Callback_callStateChangedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1callStateChangedSwigExplicitCallback},
{"Callback_transferFailed", "(JLcx/ring/daemon/Callback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1transferFailed},
{"Callback_transferFailedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1transferFailedSwigExplicitCallback},
{"Callback_transferSucceeded", "(JLcx/ring/daemon/Callback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1transferSucceeded},
{"Callback_transferSucceededSwigExplicitCallback", "(JLcx/ring/daemon/Callback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1transferSucceededSwigExplicitCallback},
{"Callback_recordPlaybackStopped", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackStopped},
{"Callback_recordPlaybackStoppedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackStoppedSwigExplicitCallback},
{"Callback_voiceMailNotify", "(JLcx/ring/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1voiceMailNotify},
{"Callback_voiceMailNotifySwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1voiceMailNotifySwigExplicitCallback},
{"Callback_incomingMessage", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingMessage},
{"Callback_incomingMessageSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingMessageSwigExplicitCallback},
{"Callback_incomingCall", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingCall},
{"Callback_incomingCallSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1incomingCallSwigExplicitCallback},
{"Callback_recordPlaybackFilepath", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackFilepath},
{"Callback_recordPlaybackFilepathSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordPlaybackFilepathSwigExplicitCallback},
{"Callback_conferenceCreated", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceCreated},
{"Callback_conferenceCreatedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceCreatedSwigExplicitCallback},
{"Callback_conferenceChanged", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceChanged},
{"Callback_conferenceChangedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceChangedSwigExplicitCallback},
{"Callback_conferenceRemoved", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemoved},
{"Callback_conferenceRemovedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemovedSwigExplicitCallback},
{"Callback_newCallCreated", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1newCallCreated},
{"Callback_newCallCreatedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1newCallCreatedSwigExplicitCallback},
{"Callback_updatePlaybackScale", "(JLcx/ring/daemon/Callback;Ljava/lang/String;II)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1updatePlaybackScale},
{"Callback_updatePlaybackScaleSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;II)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1updatePlaybackScaleSwigExplicitCallback},
{"Callback_conferenceRemove", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemove},
{"Callback_conferenceRemoveSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1conferenceRemoveSwigExplicitCallback},
{"Callback_newCall", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1newCall},
{"Callback_newCallSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1newCallSwigExplicitCallback},
{"Callback_sipCallStateChange", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1sipCallStateChange},
{"Callback_sipCallStateChangeSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1sipCallStateChangeSwigExplicitCallback},
{"Callback_recordingStateChanged", "(JLcx/ring/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordingStateChanged},
{"Callback_recordingStateChangedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordingStateChangedSwigExplicitCallback},
{"Callback_recordStateChange", "(JLcx/ring/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordStateChange},
{"Callback_recordStateChangeSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1recordStateChangeSwigExplicitCallback},
{"Callback_onRtcpReportReceived", "(JLcx/ring/daemon/Callback;Ljava/lang/String;JLcx/ring/daemon/IntegerMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1onRtcpReportReceived},
{"Callback_onRtcpReportReceivedSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;JLcx/ring/daemon/IntegerMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1onRtcpReportReceivedSwigExplicitCallback},
{"Callback_peerHold", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1peerHold},
{"Callback_peerHoldSwigExplicitCallback", "(JLcx/ring/daemon/Callback;Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1peerHoldSwigExplicitCallback},
{"new_Callback", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1Callback},
{"Callback_director_connect", "(Lcx/ring/daemon/Callback;JZZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1director_1connect},
{"Callback_change_ownership", "(Lcx/ring/daemon/Callback;JZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_Callback_1change_1ownership},
{"getAccountDetails", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAccountDetails},
{"getVolatileAccountDetails", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getVolatileAccountDetails},
{"setAccountDetails", "(Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAccountDetails},
{"setAccountActive", "(Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAccountActive},
{"getAccountTemplate", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAccountTemplate},
{"addAccount", "(JLcx/ring/daemon/StringMap;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_addAccount},
{"removeAccount", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_removeAccount},
{"getAccountList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAccountList},
{"sendRegister", "(Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_sendRegister},
{"registerAllAccounts", "()V", (void*)& Java_cx_ring_daemon_RingserviceJNI_registerAllAccounts},
{"sendAccountTextMessage", "(Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/StringMap;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_sendAccountTextMessage},
{"getMessageStatus", "(J)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_getMessageStatus},
{"lookupName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_lookupName},
{"lookupAddress", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_lookupAddress},
{"registerName", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_registerName},
{"getTlsDefaultSettings", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getTlsDefaultSettings},
{"getCodecList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCodecList},
{"getSupportedTlsMethod", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getSupportedTlsMethod},
{"getSupportedCiphers", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getSupportedCiphers},
{"getCodecDetails", "(Ljava/lang/String;J)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCodecDetails},
{"setCodecDetails", "(Ljava/lang/String;JJLcx/ring/daemon/StringMap;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_setCodecDetails},
{"getActiveCodecList", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getActiveCodecList},
{"exportOnRing", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_exportOnRing},
{"getKnownRingDevices", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getKnownRingDevices},
{"setActiveCodecList", "(Ljava/lang/String;JLcx/ring/daemon/UintVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setActiveCodecList},
{"getAudioPluginList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAudioPluginList},
{"setAudioPlugin", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAudioPlugin},
{"getAudioOutputDeviceList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAudioOutputDeviceList},
{"setAudioOutputDevice", "(I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAudioOutputDevice},
{"setAudioInputDevice", "(I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAudioInputDevice},
{"setAudioRingtoneDevice", "(I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAudioRingtoneDevice},
{"getAudioInputDeviceList", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAudioInputDeviceList},
{"getCurrentAudioDevicesIndex", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCurrentAudioDevicesIndex},
{"getAudioInputDeviceIndex", "(Ljava/lang/String;)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAudioInputDeviceIndex},
{"getAudioOutputDeviceIndex", "(Ljava/lang/String;)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAudioOutputDeviceIndex},
{"getCurrentAudioOutputPlugin", "()Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCurrentAudioOutputPlugin},
{"getNoiseSuppressState", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_getNoiseSuppressState},
{"setNoiseSuppressState", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setNoiseSuppressState},
{"isAgcEnabled", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_isAgcEnabled},
{"setAgcState", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAgcState},
{"muteDtmf", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_muteDtmf},
{"isDtmfMuted", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_isDtmfMuted},
{"isCaptureMuted", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_isCaptureMuted},
{"muteCapture", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_muteCapture},
{"isPlaybackMuted", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_isPlaybackMuted},
{"mutePlayback", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_mutePlayback},
{"isRingtoneMuted", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_isRingtoneMuted},
{"muteRingtone", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_muteRingtone},
{"getAudioManager", "()Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAudioManager},
{"setAudioManager", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAudioManager},
{"getRecordPath", "()Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getRecordPath},
{"setRecordPath", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setRecordPath},
{"getIsAlwaysRecording", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_getIsAlwaysRecording},
{"setIsAlwaysRecording", "(Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setIsAlwaysRecording},
{"setHistoryLimit", "(I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setHistoryLimit},
{"getHistoryLimit", "()I", (void*)& Java_cx_ring_daemon_RingserviceJNI_getHistoryLimit},
{"setAccountsOrder", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setAccountsOrder},
{"getHookSettings", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getHookSettings},
{"setHookSettings", "(JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setHookSettings},
{"getCredentials", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCredentials},
{"setCredentials", "(Ljava/lang/String;JLcx/ring/daemon/VectMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setCredentials},
{"getAddrFromInterfaceName", "(Ljava/lang/String;)Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAddrFromInterfaceName},
{"getAllIpInterface", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAllIpInterface},
{"getAllIpInterfaceByName", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getAllIpInterfaceByName},
{"getShortcuts", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getShortcuts},
{"setShortcuts", "(JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setShortcuts},
{"setVolume", "(Ljava/lang/String;D)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setVolume},
{"getVolume", "(Ljava/lang/String;)D", (void*)& Java_cx_ring_daemon_RingserviceJNI_getVolume},
{"validateCertificatePath", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_validateCertificatePath},
{"validateCertificate", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_validateCertificate},
{"getCertificateDetails", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCertificateDetails},
{"getCertificateDetailsPath", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCertificateDetailsPath},
{"getPinnedCertificates", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getPinnedCertificates},
{"pinCertificate", "(JLcx/ring/daemon/Blob;Z)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_pinCertificate},
{"unpinCertificate", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_unpinCertificate},
{"pinCertificatePath", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_pinCertificatePath},
{"unpinCertificatePath", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_unpinCertificatePath},
{"pinRemoteCertificate", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_pinRemoteCertificate},
{"setCertificateStatus", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_setCertificateStatus},
{"getCertificatesByStatus", "(Ljava/lang/String;Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getCertificatesByStatus},
{"getTrustRequests", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getTrustRequests},
{"acceptTrustRequest", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_acceptTrustRequest},
{"discardTrustRequest", "(Ljava/lang/String;Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_discardTrustRequest},
{"sendTrustRequest", "(Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/Blob;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_sendTrustRequest},
{"exportAccounts", "(JLcx/ring/daemon/StringVect;Ljava/lang/String;Ljava/lang/String;)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_exportAccounts},
{"importAccounts", "(Ljava/lang/String;Ljava/lang/String;)I", (void*)& Java_cx_ring_daemon_RingserviceJNI_importAccounts},
{"connectivityChanged", "()V", (void*)& Java_cx_ring_daemon_RingserviceJNI_connectivityChanged},
{"delete_ConfigurationCallback", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1ConfigurationCallback},
{"ConfigurationCallback_volumeChanged", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volumeChanged},
{"ConfigurationCallback_volumeChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volumeChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_accountsChanged", "(JLcx/ring/daemon/ConfigurationCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountsChanged},
{"ConfigurationCallback_accountsChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountsChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_historyChanged", "(JLcx/ring/daemon/ConfigurationCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1historyChanged},
{"ConfigurationCallback_historyChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1historyChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_stunStatusFailure", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1stunStatusFailure},
{"ConfigurationCallback_stunStatusFailureSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1stunStatusFailureSwigExplicitConfigurationCallback},
{"ConfigurationCallback_registrationStateChanged", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registrationStateChanged},
{"ConfigurationCallback_registrationStateChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registrationStateChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_volatileAccountDetailsChanged", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volatileAccountDetailsChanged},
{"ConfigurationCallback_volatileAccountDetailsChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1volatileAccountDetailsChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_incomingAccountMessage", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingAccountMessage},
{"ConfigurationCallback_incomingAccountMessageSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingAccountMessageSwigExplicitConfigurationCallback},
{"ConfigurationCallback_accountMessageStatusChanged", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLjava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountMessageStatusChanged},
{"ConfigurationCallback_accountMessageStatusChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLjava/lang/String;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1accountMessageStatusChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_knownDevicesChanged", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1knownDevicesChanged},
{"ConfigurationCallback_knownDevicesChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1knownDevicesChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_exportOnRingEnded", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1exportOnRingEnded},
{"ConfigurationCallback_exportOnRingEndedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1exportOnRingEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_incomingTrustRequest", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/Blob;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingTrustRequest},
{"ConfigurationCallback_incomingTrustRequestSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;JLcx/ring/daemon/Blob;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1incomingTrustRequestSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificatePinned", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePinned},
{"ConfigurationCallback_certificatePinnedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePinnedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificatePathPinned", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePathPinned},
{"ConfigurationCallback_certificatePathPinnedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificatePathPinnedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificateExpired", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateExpired},
{"ConfigurationCallback_certificateExpiredSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateExpiredSwigExplicitConfigurationCallback},
{"ConfigurationCallback_certificateStateChanged", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateStateChanged},
{"ConfigurationCallback_certificateStateChangedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1certificateStateChangedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_errorAlert", "(JLcx/ring/daemon/ConfigurationCallback;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1errorAlert},
{"ConfigurationCallback_errorAlertSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;I)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1errorAlertSwigExplicitConfigurationCallback},
{"ConfigurationCallback_getHardwareAudioFormat", "(JLcx/ring/daemon/ConfigurationCallback;JLcx/ring/daemon/IntVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getHardwareAudioFormat},
{"ConfigurationCallback_getHardwareAudioFormatSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;JLcx/ring/daemon/IntVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getHardwareAudioFormatSwigExplicitConfigurationCallback},
{"ConfigurationCallback_getAppDataPath", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getAppDataPath},
{"ConfigurationCallback_getAppDataPathSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;JLcx/ring/daemon/StringVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1getAppDataPathSwigExplicitConfigurationCallback},
{"ConfigurationCallback_nameRegistrationEnded", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1nameRegistrationEnded},
{"ConfigurationCallback_nameRegistrationEndedSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1nameRegistrationEndedSwigExplicitConfigurationCallback},
{"ConfigurationCallback_registeredNameFound", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registeredNameFound},
{"ConfigurationCallback_registeredNameFoundSwigExplicitConfigurationCallback", "(JLcx/ring/daemon/ConfigurationCallback;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1registeredNameFoundSwigExplicitConfigurationCallback},
{"new_ConfigurationCallback", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1ConfigurationCallback},
{"ConfigurationCallback_director_connect", "(Lcx/ring/daemon/ConfigurationCallback;JZZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1director_1connect},
{"ConfigurationCallback_change_ownership", "(Lcx/ring/daemon/ConfigurationCallback;JZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_ConfigurationCallback_1change_1ownership},
{"setVideoFrame", "([BIJIII)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setVideoFrame},
{"acquireNativeWindow", "(Ljava/lang/Object;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_acquireNativeWindow},
{"releaseNativeWindow", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_releaseNativeWindow},
{"setNativeWindowGeometry", "(JII)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setNativeWindowGeometry},
{"registerVideoCallback", "(Ljava/lang/String;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_registerVideoCallback},
{"unregisterVideoCallback", "(Ljava/lang/String;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_unregisterVideoCallback},
{"setDefaultDevice", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_setDefaultDevice},
{"getDefaultDevice", "()Ljava/lang/String;", (void*)& Java_cx_ring_daemon_RingserviceJNI_getDefaultDevice},
{"startCamera", "()V", (void*)& Java_cx_ring_daemon_RingserviceJNI_startCamera},
{"stopCamera", "()V", (void*)& Java_cx_ring_daemon_RingserviceJNI_stopCamera},
{"hasCameraStarted", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_hasCameraStarted},
{"switchInput__SWIG_1", "(Ljava/lang/String;)Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_switchInput_1_1SWIG_11},
{"switchToCamera", "()Z", (void*)& Java_cx_ring_daemon_RingserviceJNI_switchToCamera},
{"getSettings", "(Ljava/lang/String;)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_getSettings},
{"applySettings", "(Ljava/lang/String;JLcx/ring/daemon/StringMap;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_applySettings},
{"addVideoDevice", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_addVideoDevice},
{"removeVideoDevice", "(Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_removeVideoDevice},
{"obtainFrame", "(I)J", (void*)& Java_cx_ring_daemon_RingserviceJNI_obtainFrame},
{"releaseFrame", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_releaseFrame},
{"registerSinkTarget", "(Ljava/lang/String;J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_registerSinkTarget},
{"delete_VideoCallback", "(J)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_delete_1VideoCallback},
{"VideoCallback_getCameraInfo", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;JLcx/ring/daemon/IntVect;JLcx/ring/daemon/UintVect;JLcx/ring/daemon/UintVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1getCameraInfo},
{"VideoCallback_getCameraInfoSwigExplicitVideoCallback", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;JLcx/ring/daemon/IntVect;JLcx/ring/daemon/UintVect;JLcx/ring/daemon/UintVect;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1getCameraInfoSwigExplicitVideoCallback},
{"VideoCallback_setParameters", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;IIII)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1setParameters},
{"VideoCallback_setParametersSwigExplicitVideoCallback", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;IIII)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1setParametersSwigExplicitVideoCallback},
{"VideoCallback_startCapture", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1startCapture},
{"VideoCallback_startCaptureSwigExplicitVideoCallback", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1startCaptureSwigExplicitVideoCallback},
{"VideoCallback_stopCapture", "(JLcx/ring/daemon/VideoCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1stopCapture},
{"VideoCallback_stopCaptureSwigExplicitVideoCallback", "(JLcx/ring/daemon/VideoCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1stopCaptureSwigExplicitVideoCallback},
{"VideoCallback_decodingStarted", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;IIZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStarted},
{"VideoCallback_decodingStartedSwigExplicitVideoCallback", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;IIZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStartedSwigExplicitVideoCallback},
{"VideoCallback_decodingStopped", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStopped},
{"VideoCallback_decodingStoppedSwigExplicitVideoCallback", "(JLcx/ring/daemon/VideoCallback;Ljava/lang/String;Ljava/lang/String;Z)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1decodingStoppedSwigExplicitVideoCallback},
{"new_VideoCallback", "()J", (void*)& Java_cx_ring_daemon_RingserviceJNI_new_1VideoCallback},
{"VideoCallback_director_connect", "(Lcx/ring/daemon/VideoCallback;JZZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1director_1connect},
{"VideoCallback_change_ownership", "(Lcx/ring/daemon/VideoCallback;JZ)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_VideoCallback_1change_1ownership},
{"init", "(JLcx/ring/daemon/ConfigurationCallback;JLcx/ring/daemon/Callback;JLcx/ring/daemon/VideoCallback;)V", (void*)& Java_cx_ring_daemon_RingserviceJNI_init}

	};

	r = env->RegisterNatives (clazz, methods, (int) (sizeof(methods) / sizeof(methods[0])));
	return JNI_VERSION_1_6;
}

void JNI_OnUnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env;
	jclass clazz;

	RING_INFO("JNI_OnUnLoad");

	/* get env */
    if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
		RING_ERR("JNI_OnUnLoad: failed to get the environment using GetEnv()");
        return;
    }
	RING_INFO("JNI_OnUnLoad: GetEnv %p", env);

    /* Get jclass with env->FindClass */
	clazz = env->FindClass(kringservicePath);
	if (!clazz) {
        RING_ERR("JNI_OnUnLoad: whoops, %s class not found!", kringservicePath);
	}

	/* remove instances of class object we need into cache */
    //deinitClassHelper(env, gManagerObject);

	env->UnregisterNatives(clazz);
	RING_INFO("JNI_OnUnLoad: Native functions unregistered");
}
