// Generated by Dagger (https://dagger.dev).
package net.jami.account;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.AccountService;
import net.jami.services.DeviceRuntimeService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SIPCreationPresenter_Factory implements Factory<SIPCreationPresenter> {
  private final Provider<AccountService> mAccountServiceProvider;

  private final Provider<DeviceRuntimeService> mDeviceServiceProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public SIPCreationPresenter_Factory(Provider<AccountService> mAccountServiceProvider,
      Provider<DeviceRuntimeService> mDeviceServiceProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    this.mAccountServiceProvider = mAccountServiceProvider;
    this.mDeviceServiceProvider = mDeviceServiceProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public SIPCreationPresenter get() {
    return newInstance(mAccountServiceProvider.get(), mDeviceServiceProvider.get(), mUiSchedulerProvider.get());
  }

  public static SIPCreationPresenter_Factory create(
      Provider<AccountService> mAccountServiceProvider,
      Provider<DeviceRuntimeService> mDeviceServiceProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    return new SIPCreationPresenter_Factory(mAccountServiceProvider, mDeviceServiceProvider, mUiSchedulerProvider);
  }

  public static SIPCreationPresenter newInstance(AccountService mAccountService,
      DeviceRuntimeService mDeviceService, Scheduler mUiScheduler) {
    return new SIPCreationPresenter(mAccountService, mDeviceService, mUiScheduler);
  }
}
