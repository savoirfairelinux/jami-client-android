// Generated by Dagger (https://dagger.dev).
package net.jami.settings;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.ConversationFacade;
import net.jami.services.PreferencesService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SettingsPresenter_Factory implements Factory<SettingsPresenter> {
  private final Provider<PreferencesService> mPreferencesServiceProvider;

  private final Provider<ConversationFacade> mConversationFacadeProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public SettingsPresenter_Factory(Provider<PreferencesService> mPreferencesServiceProvider,
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    this.mPreferencesServiceProvider = mPreferencesServiceProvider;
    this.mConversationFacadeProvider = mConversationFacadeProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public SettingsPresenter get() {
    return newInstance(mPreferencesServiceProvider.get(), mConversationFacadeProvider.get(), mUiSchedulerProvider.get());
  }

  public static SettingsPresenter_Factory create(
      Provider<PreferencesService> mPreferencesServiceProvider,
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    return new SettingsPresenter_Factory(mPreferencesServiceProvider, mConversationFacadeProvider, mUiSchedulerProvider);
  }

  public static SettingsPresenter newInstance(PreferencesService mPreferencesService,
      ConversationFacade mConversationFacade, Scheduler mUiScheduler) {
    return new SettingsPresenter(mPreferencesService, mConversationFacade, mUiScheduler);
  }
}
