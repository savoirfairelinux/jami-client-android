// Generated by Dagger (https://dagger.dev).
package net.jami.conversation;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.AccountService;
import net.jami.services.ContactService;
import net.jami.services.ConversationFacade;
import net.jami.services.DeviceRuntimeService;
import net.jami.services.HardwareService;
import net.jami.services.PreferencesService;
import net.jami.services.VCardService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ConversationPresenter_Factory implements Factory<ConversationPresenter> {
  private final Provider<ContactService> mContactServiceProvider;

  private final Provider<AccountService> mAccountServiceProvider;

  private final Provider<HardwareService> mHardwareServiceProvider;

  private final Provider<ConversationFacade> mConversationFacadeProvider;

  private final Provider<VCardService> mVCardServiceProvider;

  private final Provider<DeviceRuntimeService> deviceRuntimeServiceProvider;

  private final Provider<PreferencesService> mPreferencesServiceProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public ConversationPresenter_Factory(Provider<ContactService> mContactServiceProvider,
      Provider<AccountService> mAccountServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<VCardService> mVCardServiceProvider,
      Provider<DeviceRuntimeService> deviceRuntimeServiceProvider,
      Provider<PreferencesService> mPreferencesServiceProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    this.mContactServiceProvider = mContactServiceProvider;
    this.mAccountServiceProvider = mAccountServiceProvider;
    this.mHardwareServiceProvider = mHardwareServiceProvider;
    this.mConversationFacadeProvider = mConversationFacadeProvider;
    this.mVCardServiceProvider = mVCardServiceProvider;
    this.deviceRuntimeServiceProvider = deviceRuntimeServiceProvider;
    this.mPreferencesServiceProvider = mPreferencesServiceProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public ConversationPresenter get() {
    return newInstance(mContactServiceProvider.get(), mAccountServiceProvider.get(), mHardwareServiceProvider.get(), mConversationFacadeProvider.get(), mVCardServiceProvider.get(), deviceRuntimeServiceProvider.get(), mPreferencesServiceProvider.get(), mUiSchedulerProvider.get());
  }

  public static ConversationPresenter_Factory create(
      Provider<ContactService> mContactServiceProvider,
      Provider<AccountService> mAccountServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<VCardService> mVCardServiceProvider,
      Provider<DeviceRuntimeService> deviceRuntimeServiceProvider,
      Provider<PreferencesService> mPreferencesServiceProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    return new ConversationPresenter_Factory(mContactServiceProvider, mAccountServiceProvider, mHardwareServiceProvider, mConversationFacadeProvider, mVCardServiceProvider, deviceRuntimeServiceProvider, mPreferencesServiceProvider, mUiSchedulerProvider);
  }

  public static ConversationPresenter newInstance(ContactService mContactService,
      AccountService mAccountService, HardwareService mHardwareService,
      ConversationFacade mConversationFacade, VCardService mVCardService,
      DeviceRuntimeService deviceRuntimeService, PreferencesService mPreferencesService,
      Scheduler mUiScheduler) {
    return new ConversationPresenter(mContactService, mAccountService, mHardwareService, mConversationFacade, mVCardService, deviceRuntimeService, mPreferencesService, mUiScheduler);
  }
}
