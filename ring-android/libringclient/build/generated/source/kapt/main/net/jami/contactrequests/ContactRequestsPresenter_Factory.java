// Generated by Dagger (https://dagger.dev).
package net.jami.contactrequests;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.AccountService;
import net.jami.services.ConversationFacade;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ContactRequestsPresenter_Factory implements Factory<ContactRequestsPresenter> {
  private final Provider<ConversationFacade> mConversationFacadeProvider;

  private final Provider<AccountService> mAccountServiceProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public ContactRequestsPresenter_Factory(Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<AccountService> mAccountServiceProvider, Provider<Scheduler> mUiSchedulerProvider) {
    this.mConversationFacadeProvider = mConversationFacadeProvider;
    this.mAccountServiceProvider = mAccountServiceProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public ContactRequestsPresenter get() {
    return newInstance(mConversationFacadeProvider.get(), mAccountServiceProvider.get(), mUiSchedulerProvider.get());
  }

  public static ContactRequestsPresenter_Factory create(
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<AccountService> mAccountServiceProvider, Provider<Scheduler> mUiSchedulerProvider) {
    return new ContactRequestsPresenter_Factory(mConversationFacadeProvider, mAccountServiceProvider, mUiSchedulerProvider);
  }

  public static ContactRequestsPresenter newInstance(ConversationFacade mConversationFacade,
      AccountService mAccountService, Scheduler mUiScheduler) {
    return new ContactRequestsPresenter(mConversationFacade, mAccountService, mUiScheduler);
  }
}
