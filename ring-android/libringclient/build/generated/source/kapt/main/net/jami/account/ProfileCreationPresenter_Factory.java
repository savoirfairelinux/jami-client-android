// Generated by Dagger (https://dagger.dev).
package net.jami.account;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.DeviceRuntimeService;
import net.jami.services.HardwareService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ProfileCreationPresenter_Factory implements Factory<ProfileCreationPresenter> {
  private final Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider;

  private final Provider<HardwareService> mHardwareServiceProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public ProfileCreationPresenter_Factory(
      Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    this.mDeviceRuntimeServiceProvider = mDeviceRuntimeServiceProvider;
    this.mHardwareServiceProvider = mHardwareServiceProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public ProfileCreationPresenter get() {
    return newInstance(mDeviceRuntimeServiceProvider.get(), mHardwareServiceProvider.get(), mUiSchedulerProvider.get());
  }

  public static ProfileCreationPresenter_Factory create(
      Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    return new ProfileCreationPresenter_Factory(mDeviceRuntimeServiceProvider, mHardwareServiceProvider, mUiSchedulerProvider);
  }

  public static ProfileCreationPresenter newInstance(DeviceRuntimeService mDeviceRuntimeService,
      HardwareService mHardwareService, Scheduler mUiScheduler) {
    return new ProfileCreationPresenter(mDeviceRuntimeService, mHardwareService, mUiScheduler);
  }
}
