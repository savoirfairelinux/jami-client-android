// Generated by Dagger (https://dagger.dev).
package net.jami.call;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.AccountService;
import net.jami.services.CallService;
import net.jami.services.ContactService;
import net.jami.services.ConversationFacade;
import net.jami.services.DeviceRuntimeService;
import net.jami.services.HardwareService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CallPresenter_Factory implements Factory<CallPresenter> {
  private final Provider<AccountService> mAccountServiceProvider;

  private final Provider<ContactService> mContactServiceProvider;

  private final Provider<HardwareService> mHardwareServiceProvider;

  private final Provider<CallService> mCallServiceProvider;

  private final Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider;

  private final Provider<ConversationFacade> mConversationFacadeProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public CallPresenter_Factory(Provider<AccountService> mAccountServiceProvider,
      Provider<ContactService> mContactServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<CallService> mCallServiceProvider,
      Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider,
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    this.mAccountServiceProvider = mAccountServiceProvider;
    this.mContactServiceProvider = mContactServiceProvider;
    this.mHardwareServiceProvider = mHardwareServiceProvider;
    this.mCallServiceProvider = mCallServiceProvider;
    this.mDeviceRuntimeServiceProvider = mDeviceRuntimeServiceProvider;
    this.mConversationFacadeProvider = mConversationFacadeProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public CallPresenter get() {
    return newInstance(mAccountServiceProvider.get(), mContactServiceProvider.get(), mHardwareServiceProvider.get(), mCallServiceProvider.get(), mDeviceRuntimeServiceProvider.get(), mConversationFacadeProvider.get(), mUiSchedulerProvider.get());
  }

  public static CallPresenter_Factory create(Provider<AccountService> mAccountServiceProvider,
      Provider<ContactService> mContactServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<CallService> mCallServiceProvider,
      Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider,
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<Scheduler> mUiSchedulerProvider) {
    return new CallPresenter_Factory(mAccountServiceProvider, mContactServiceProvider, mHardwareServiceProvider, mCallServiceProvider, mDeviceRuntimeServiceProvider, mConversationFacadeProvider, mUiSchedulerProvider);
  }

  public static CallPresenter newInstance(AccountService mAccountService,
      ContactService mContactService, HardwareService mHardwareService, CallService mCallService,
      DeviceRuntimeService mDeviceRuntimeService, ConversationFacade mConversationFacade,
      Scheduler mUiScheduler) {
    return new CallPresenter(mAccountService, mContactService, mHardwareService, mCallService, mDeviceRuntimeService, mConversationFacade, mUiScheduler);
  }
}
