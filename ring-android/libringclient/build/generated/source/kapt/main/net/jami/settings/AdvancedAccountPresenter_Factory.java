// Generated by Dagger (https://dagger.dev).
package net.jami.settings;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import net.jami.services.AccountService;
import net.jami.services.ConversationFacade;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AdvancedAccountPresenter_Factory implements Factory<AdvancedAccountPresenter> {
  private final Provider<ConversationFacade> mConversationFacadeProvider;

  private final Provider<AccountService> mAccountServiceProvider;

  public AdvancedAccountPresenter_Factory(Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<AccountService> mAccountServiceProvider) {
    this.mConversationFacadeProvider = mConversationFacadeProvider;
    this.mAccountServiceProvider = mAccountServiceProvider;
  }

  @Override
  public AdvancedAccountPresenter get() {
    return newInstance(mConversationFacadeProvider.get(), mAccountServiceProvider.get());
  }

  public static AdvancedAccountPresenter_Factory create(
      Provider<ConversationFacade> mConversationFacadeProvider,
      Provider<AccountService> mAccountServiceProvider) {
    return new AdvancedAccountPresenter_Factory(mConversationFacadeProvider, mAccountServiceProvider);
  }

  public static AdvancedAccountPresenter newInstance(ConversationFacade mConversationFacade,
      AccountService mAccountService) {
    return new AdvancedAccountPresenter(mConversationFacade, mAccountService);
  }
}
