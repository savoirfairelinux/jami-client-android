// Generated by Dagger (https://dagger.dev).
package net.jami.navigation;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import io.reactivex.rxjava3.core.Scheduler;
import javax.inject.Provider;
import net.jami.services.AccountService;
import net.jami.services.DeviceRuntimeService;
import net.jami.services.HardwareService;
import net.jami.services.VCardService;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeNavigationPresenter_Factory implements Factory<HomeNavigationPresenter> {
  private final Provider<AccountService> mAccountServiceProvider;

  private final Provider<HardwareService> mHardwareServiceProvider;

  private final Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider;

  private final Provider<VCardService> mVCardServiceProvider;

  private final Provider<Scheduler> mUiSchedulerProvider;

  public HomeNavigationPresenter_Factory(Provider<AccountService> mAccountServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider,
      Provider<VCardService> mVCardServiceProvider, Provider<Scheduler> mUiSchedulerProvider) {
    this.mAccountServiceProvider = mAccountServiceProvider;
    this.mHardwareServiceProvider = mHardwareServiceProvider;
    this.mDeviceRuntimeServiceProvider = mDeviceRuntimeServiceProvider;
    this.mVCardServiceProvider = mVCardServiceProvider;
    this.mUiSchedulerProvider = mUiSchedulerProvider;
  }

  @Override
  public HomeNavigationPresenter get() {
    return newInstance(mAccountServiceProvider.get(), mHardwareServiceProvider.get(), mDeviceRuntimeServiceProvider.get(), mVCardServiceProvider.get(), mUiSchedulerProvider.get());
  }

  public static HomeNavigationPresenter_Factory create(
      Provider<AccountService> mAccountServiceProvider,
      Provider<HardwareService> mHardwareServiceProvider,
      Provider<DeviceRuntimeService> mDeviceRuntimeServiceProvider,
      Provider<VCardService> mVCardServiceProvider, Provider<Scheduler> mUiSchedulerProvider) {
    return new HomeNavigationPresenter_Factory(mAccountServiceProvider, mHardwareServiceProvider, mDeviceRuntimeServiceProvider, mVCardServiceProvider, mUiSchedulerProvider);
  }

  public static HomeNavigationPresenter newInstance(AccountService mAccountService,
      HardwareService mHardwareService, DeviceRuntimeService mDeviceRuntimeService,
      VCardService mVCardService, Scheduler mUiScheduler) {
    return new HomeNavigationPresenter(mAccountService, mHardwareService, mDeviceRuntimeService, mVCardService, mUiScheduler);
  }
}
