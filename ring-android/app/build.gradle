apply plugin: "com.android.model.application"

def project_root = file(project(':').projectDir.parentFile)
def ring_daemon = project_root.absolutePath + "/ring-daemon"
def ring_contrib = ring_daemon + "/contrib/arm-linux-androideabi"

println(ring_contrib)

model {
    android {
        compileSdkVersion 23
        buildToolsVersion "23.0.2"
        ndk {
            moduleName "ring_jni"
            toolchain "gcc"
            toolchainVersion "4.9"
            platformVersion = 16

            CFlags.add("-fpic")

            cppFlags.add("-DCCPP_PREFIX")
            cppFlags.add("-DAPP_NAME=\\\"Ring\\\"")
            cppFlags.add("-DSWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON")
            cppFlags.add("-DPJ_AUTOCONF=1")
            cppFlags.add("-DHAVE_CONFIG_H")

            cppFlags.add("-std=c++11")
            cppFlags.addAll(["-fpic", "-fexceptions", "-frtti", "-fpermissive"])
            cppFlags.add("-I${ring_daemon}/src".toString())
            /*cppFlags.add("-I${ring_daemon}".toString())
            cppFlags.add("-I${ring_daemon}/src".toString())
            cppFlags.add("-I${ring_contrib}".toString())*/

            ldLibs.addAll(["log", "OpenSLES", "android"])

            ldFlags.add("-L${ring_contrib}/lib".toString())

            ldLibs.add("opendht")

            ldLibs.addAll(["pjsip-ua-arm-unknown-linux-androideabi",
                           "pjsip-simple-arm-unknown-linux-androideabi",
                           "pjsip-arm-unknown-linux-androideabi",
                           "pjnath-arm-unknown-linux-androideabi",
                           "pjmedia-arm-unknown-linux-androideabi",
                           "pjlib-util-arm-unknown-linux-androideabi",
                           "pj-arm-unknown-linux-androideabi"])
            ldLibs.add("iax")

            ldLibs.add("upnp")

            ldLibs.add("samplerate")

            ldLibs.addAll(["gnutls", "nettle", "hogweed", "gmp"])
            ldLibs.addAll(["avformat", "avdevice", "avcodec", "avfilter", "avutil"])

            ldLibs.add("pcre")
            ldLibs.add("ixml")
            ldLibs.add("threadutil")

            ldLibs.add("sndfile")
            ldLibs.add("iconv")
            ldLibs.add("yaml-cpp")
            ldLibs.add("z")
            ldLibs.add("uuid")

            ldLibs.add("swscale")

            ldLibs.addAll(["opus", "speex", "vorbis", "vorbisenc", "ogg", "FLAC"])

            stl "gnustl_static"
        }

        compileOptions.with {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
        buildTypes {
            debug {
                minifyEnabled = false
            }
            release {
                minifyEnabled = true
                //proguardFiles.add(getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro')
                proguardFiles.add(file('proguard-rules.pro'))
            }
        }
        productFlavors {
            create("arm") {
                ndk {
                    abiFilters.add("armeabi-v7a")
                }
            }
            create("fat") {
            }
        }
    }
    android.signingConfigs {
        create("myConfig") {
            keyAlias 'ring'
            storeFile file('../keystore.bin')
        }
    }
    android.lintOptions {
        disable 'MissingTranslation'
    }
    android.sources {
        main {
            aidl.source.srcDirs = ['src/main/java']
            //jniLibs.source.srcDirs = ['src/main/libs']
            //jni.source.srcDirs = []
        }
        //instrumentTest.setRoot('tests')
        main {
            jni {
                source {
                    exclude "**/ringservice_loader.c"
                }
                dependencies {
                    library "ring" linkage "static"
                }
            }
        }
    }

    repositories {
        prebuilt(PrebuiltLibraries) {
            ring {
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("${ring_daemon}/build-android-arm-linux-androideabi/src/.libs/libring.a".toString())
                }
            }
        }
    }

}

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.android.support:support-v13:23.1.+'
    compile 'com.android.support:design:23.1.+'
    compile 'com.android.support:cardview-v7:23.1.+'
    compile 'com.android.support:preference-v14:23.1.+'
    compile 'com.android.support:recyclerview-v7:23.1.+'
    compile 'com.jayway.android.robotium:robotium-solo:5.4.1'
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.0.11'
    compile 'se.emilsjolander:stickylistheaders:2.7.+'
}

task runSwig(type: Exec) {
    /*String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        workingDir = '/src/main/jni'   // This implicitly starts from $(projectDir) evidently
        commandLine 'cmd', '/c', 'swig'
        args '-c++', '-java', '-package', 'cx.ring.service', '-outdir', coreWrapperDir.absolutePath, 'jni_interface.i'
    } else {*/
        workingDir = 'src/main'
        commandLine 'swig'
        args = ['-c++', '-java', '-package', 'cx.ring.service', '-outdir', 'java/cx/ring/service', '-o', 'jni/ring_wrapper.cpp', "jni/jni_interface.i"]
    //}

}
task runSwig(type: Exec) {
    /*String osName = System.getProperty("os.name").toLowerCase();
    if (osName.contains("windows")) {
        workingDir = '/src/main/jni'   // This implicitly starts from $(projectDir) evidently
        commandLine 'cmd', '/c', 'swig'
        args '-c++', '-java', '-package', 'cx.ring.service', '-outdir', coreWrapperDir.absolutePath, 'jni_interface.i'
    } else {*/
    workingDir = 'src/main'
    commandLine 'swig'
    args = ['-c++', '-java', '-package', 'cx.ring.service', '-outdir', 'java/cx/ring/service', '-o', 'jni/ring_wrapper.cpp', "jni/jni_interface.i"]
    //}

}

task buildWrapper(type: Exec, dep) {

}