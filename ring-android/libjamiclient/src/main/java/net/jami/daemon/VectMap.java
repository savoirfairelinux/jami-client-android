/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package net.jami.daemon;

public class VectMap extends java.util.AbstractList<StringMap> implements java.util.RandomAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VectMap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VectMap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        JamiServiceJNI.delete_VectMap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public java.util.ArrayList<java.util.Map<String, String>> toNative() {
    java.util.ArrayList<java.util.Map<String, String>> out = new java.util.ArrayList<>(size());
    for (int i = 0; i < size(); ++i) {
        out.add(get(i).toNative());
    }
    return out;
  }

  public VectMap(StringMap[] initialElements) {
    this();
    reserve(initialElements.length);

    for (StringMap element : initialElements) {
      add(element);
    }
  }

  public VectMap(Iterable<StringMap> initialElements) {
    this();
    for (StringMap element : initialElements) {
      add(element);
    }
  }

  public StringMap get(int index) {
    return doGet(index);
  }

  public StringMap set(int index, StringMap e) {
    return doSet(index, e);
  }

  public boolean add(StringMap e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, StringMap e) {
    modCount++;
    doAdd(index, e);
  }

  public StringMap remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public VectMap() {
    this(JamiServiceJNI.new_VectMap__SWIG_0(), true);
  }

  public VectMap(VectMap other) {
    this(JamiServiceJNI.new_VectMap__SWIG_1(VectMap.getCPtr(other), other), true);
  }

  public long capacity() {
    return JamiServiceJNI.VectMap_capacity(swigCPtr, this);
  }

  public void reserve(long n) {
    JamiServiceJNI.VectMap_reserve(swigCPtr, this, n);
  }

  public boolean isEmpty() {
    return JamiServiceJNI.VectMap_isEmpty(swigCPtr, this);
  }

  public void clear() {
    JamiServiceJNI.VectMap_clear(swigCPtr, this);
  }

  public VectMap(int count, StringMap value) {
    this(JamiServiceJNI.new_VectMap__SWIG_2(count, StringMap.getCPtr(value), value), true);
  }

  private int doSize() {
    return JamiServiceJNI.VectMap_doSize(swigCPtr, this);
  }

  private void doAdd(StringMap x) {
    JamiServiceJNI.VectMap_doAdd__SWIG_0(swigCPtr, this, StringMap.getCPtr(x), x);
  }

  private void doAdd(int index, StringMap x) {
    JamiServiceJNI.VectMap_doAdd__SWIG_1(swigCPtr, this, index, StringMap.getCPtr(x), x);
  }

  private StringMap doRemove(int index) {
    return new StringMap(JamiServiceJNI.VectMap_doRemove(swigCPtr, this, index), true);
  }

  private StringMap doGet(int index) {
    return new StringMap(JamiServiceJNI.VectMap_doGet(swigCPtr, this, index), false);
  }

  private StringMap doSet(int index, StringMap val) {
    return new StringMap(JamiServiceJNI.VectMap_doSet(swigCPtr, this, index, StringMap.getCPtr(val), val), true);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    JamiServiceJNI.VectMap_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
